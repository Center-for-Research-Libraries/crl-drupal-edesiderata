<?php

// $Id$

/**
 * @file
 *     Implementation of a pathauto-generated path checker drush command.
 */
 
/**
 * Implementation of hook_drush_command().
 */
function pathauto_check_drush_command() {
  $items = array();

  $items['pathauto check'] = array(
    'callback' => 'pathauto_check_callback',
    'description' => "Find nodes whose URL alias differs from the one that would be generated with current pathauto rules.",
  );

  return $items;
}


/**
 * Implementation of hook_drush_help().
 */
function pathauto_check_drush_help($section) {
  switch($section) {
    case 'drush:pathauto check':
      return dt("Checks if a node's current URL alias is different than the one that would be generated by the current pathauto rules.");
  }
}

/**
 * Drush command callback.
 */
function pathauto_check_callback() {
  // Get all published nodes.
  $result = db_query('SELECT n.* FROM {node} n WHERE n.status = 1'); 
  while ($node = db_fetch_object($result)) {
    // Get the specific pattern or the default
    if (variable_get('language_content_type_'. $node->type, 0)) {
      $pattern = trim(variable_get('pathauto_node_'. $node->type .'_'. $node->language .'_pattern', FALSE));
    }
    if (empty($pattern)) {
      $pattern = trim(variable_get('pathauto_node_'. $node->type .'_pattern', FALSE));
      if (empty($pattern)) {
        $pattern = trim(variable_get('pathauto_node_pattern', FALSE));
      }
    }
    // Only do work if there's a pattern
    if ($pattern) {
      $placeholders = pathauto_get_placeholders('node', $node);
      $src = "node/$node->nid";
      $existing_alias_data = _pathauto_existing_alias_data($src);
      $old_alias = $existing_alias_data['old_alias'];
      if ($old_alias) {
        // An alias exists for this node.  Determine what the alias would be
        // if it were created with the current pathauto rules.
        $new_alias = _pathauto_check_get_alias('node', $op, $placeholders, $src, $node->nid, $node->type, $node->language);
        if ($old_alias != $new_alias) {
          drush_print($src . ': ' . $old_alias . ' != ' . $new_alias);
        }
      }
    }
  }
}

/**
 * Apply patterns to get a node's alias without actually creating the alias.
 *
 * The code for this function is taken largely from pathauto_create_alias().
 * See that function's documentation at http://drupalcontrib.org/api/function/pathauto_create_alias
 * for a description of arguments.
 *
 * Note that unlike pathauto_create_alias(), this function does not support aliases for taxonomy terms.
 */
function _pathauto_check_get_alias($module, $op, $placeholders, $src, $entity_id, $type = NULL, $language = '') {
  // Retrieve and apply the pattern for this content type
  if (!empty($type)) {
    $pattern = trim(variable_get('pathauto_'. $module .'_'. $type .'_'. $language .'_pattern', ''));
    if (empty($pattern)) {
      $pattern = trim(variable_get('pathauto_'. $module .'_'. $type .'_pattern', ''));
    }
  }
  if (empty($pattern)) {
    $pattern = trim(variable_get('pathauto_'. $module .'_pattern', ''));
  }
  // No pattern? Do nothing (otherwise we may blow away existing aliases...)
  if (empty($pattern)) {
    return '';
  }

  if ($module == 'taxonomy') {
    // We're only concerned with nodes.  Do nothing.
    return '';
  }

 // Replace the placeholders with the values provided by the module,
  // and optionally lower-case the result
  $alias = str_replace($placeholders['tokens'], $placeholders['values'], $pattern);

  if (variable_get('pathauto_case', 1)) {
    $alias = drupal_strtolower($alias);
  }

  // Two or more slashes should be collapsed into one
  $alias = preg_replace('/\/+/', '/', $alias);

  // Trim any leading or trailing slashes
  $alias = preg_replace('/^\/|\/+$/', '', $alias);

  $maxlength = min(variable_get('pathauto_max_length', 100), 128);
  $alias = drupal_substr($alias, 0, $maxlength);

  // If the alias already exists, generate a new, hopefully unique, variant
  $separator = variable_get('pathauto_separator', '-');
  if (_pathauto_alias_exists($alias, $src, $language)) {
    $original_alias = $alias;
    for ($i = 0; _pathauto_alias_exists(drupal_substr($alias, 0, $maxlength - strlen($i)) . $separator . $i, $src, $language); $i++) {
    }
    // Make room for the sequence number
    $alias = drupal_substr($alias, 0, $maxlength - drupal_strlen($i));
    $alias = $alias . $separator . $i;
  }
  
  return $alias;
}
