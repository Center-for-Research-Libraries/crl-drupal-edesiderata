<?php

// Include status sync logic
require_once dirname(__FILE__) . '/includes/crl_helpers_desiderata_status_tools.inc';

/**
 * Implements hook_menu().
 */
function crl_helpers_menu() {
  $items['admin/config/crl'] = array(
    'title' => 'CRL Customizations',
    'description' => 'Options for CRL-specific Functionality.',
    'position' => 'right',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}


// Cron tasks
function crl_helpers_cron() {
  // Sync inst picklist
  _crl_sf_sync_picklist();
  // Also do automated status checking for CRL activity entities, etc.
  $sync = new CrlResourceStatusSync();
  $sync->calculate_sync()->run_sync();
}


// Helper to fetch the institution picklist from Salesforce.
function _crl_sf_sync_picklist() {
  if (module_exists('salesforce_api')) {
    $query = "SELECT Display_Name__c, Id, Member_ID__c From Account WHERE (Active__c = TRUE) AND (Member_Type__c = 'Voting' OR Member_Type__c = 'Group' OR Member_Type__c = 'Global') ORDER BY Name_for_sorting__c ASC";
    $sf_records = salesforce_api_query($query);
    $institutions_array_sfid = array();
    $institutions_array_id = array();
    $no_id_array = array();
    if (!empty($sf_records)) {
      foreach ($sf_records as $record) {
        if (!empty($record->Id) && !empty($record->Display_Name__c)) {
          // For legacy support we want to be sure to store the 15 char version 
          // of the ID instead of the 18 char version returned in the query
          $record->Id = substr($record->Id, 0, 15);
          $institutions_array_sfid[$record->Id] = $record->Display_Name__c;
          if (!empty($record->Member_ID__c)) {
            $institutions_array_id[$record->Member_ID__c] = $record->Display_Name__c;
          }
          else {
            $no_id_array[$record->Id] = $record->Display_Name__c;
          }
        }
      }
      if (!empty($no_id_array)) {
        $institutions_sans_id = '';
        foreach($no_id_array as $value) {
          $institutions_sans_id .= $value . ", ";
        }
        watchdog('crl_sf', 'The following institutions have no CRL id in Salesforce: @institutions_sans_id', array('@institutions_sans_id' => $institutions_sans_id), WATCHDOG_WARNING);
      }
      variable_set('crl_sf_sync_institutions_array_sfid', $institutions_array_sfid);
      variable_set('crl_sf_sync_institutions_array', $institutions_array_id);
    }
  }
}


/**
 * Implements hook_theme().
 */
function crl_helpers_theme() {
  return array(
    // Theme hook to generate a resource teaser.
    'crl_helpers_resource_teaser' => array(
      'variables' => array('nid' => NULL),
      'path' => drupal_get_path('module', 'crl_helpers') . '/themes',
      'file' => 'crl_helpers.theme.inc',
    ),
    // Theme hook to generate a full resource summary.
    'crl_helpers_resource_summary' => array(
      'variables' => array('nid' => NULL),
      'path' => drupal_get_path('module', 'crl_helpers') . '/themes',
      'file' => 'crl_helpers.theme.inc',
    ),
    // Theme hook to generate facet breadcrumb
    'crl_helpers_facet_breadcrumb' => array(
      'variables' => array('breadcrumb' => array()),
      'path' => drupal_get_path('module', 'crl_helpers') . '/themes',
      'file' => 'crl_helpers.theme.inc',
    ),
  );
}


/**
 * Implements hook_block_info().
 */
function crl_helpers_block_info() {
  $blocks['crl_helpers_resource_summary'] = array(
    'info' => t('CRL Resource Summary'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['crl_helpers_facet_breadcrumb'] = array(
    'info' => t('CRL Facet Breadcrumb'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


function crl_helpers_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'crl_helpers_resource_summary':
      $block['subject'] = '';
      $output = array(
        'resource_summary' => array(
          '#theme' => 'crl_helpers_resource_summary',
          '#nid' => arg(1),
        ),
      );
      $block['content'] = $output;
      break;
    case 'crl_helpers_facet_breadcrumb':
      $block['subject'] = '';
      $output = '';
      if (isset($_GET['f']) || isset($_GET['search_api_views_fulltext'])) {
        $output = array(
          'facet_breadcrumb' => array(
            '#theme' => 'crl_helpers_facet_breadcrumb',
          ),
        );
      }
      $block['content'] = $output;
      break;
  }
  return $block;
}


/**
 * Get resoruce summary values from a resource entity.
 * 
 * The various functions that are called through this function should implement
 * static caching whenever DB queries are needed, so it should be safe to call
 * this multiple times on the same page load (e.g. if summary info must be
 * requested from different contexts for the same resource entitity). We don't
 * do static caching in this function directly as it would be redundant to
 * static caching within its later called functions (such as entity_load). This
 * avoids using up unnecessary memory.
 */
function crl_helpers_get_resource_summary($entity) {
  $nid = $entity->nid;
  $summary = array();
  $wrapper = entity_metadata_wrapper('node', $entity);
  
  // Get general backref info through Entity API.
  $summary['backref_entities'] = $wrapper->crl_resource_backref->raw();
  
  // Get status values through Entity API. This also calculated through a
  // backref.
  $crl_statuses = $wrapper->crl_resource_status_backref->raw();
  foreach ($crl_statuses as $status) {
    if (!empty($status)) {
      $summary['status'][] = $status;
    }
  }
  
  // Get the abstract text through Entity API
  $abstract = $wrapper->body->raw();
  $summary['abstract'] = $abstract['safe_value'];
  
  // Get the source text
  $jisc_id = crl_helpers_get_single_node_field($entity, 'field_jisc_id');
  $source_status = crl_helpers_get_single_node_field($entity, 'field_resource_source_status');
  $summary['source_text'] = crl_helpers_source_text($source_status, $jisc_id);
  
  // Get the comment count
  $comment_count = 0;
  if (isset($entity->comment_count)) {
    $comment_count = $entity->comment_count;
  }
  $summary['comment_count'] = $comment_count;
  
  // Get the subscription count info
  $sub_count = $have_count = $want_count = 0;
  if (function_exists('crl_desiderata_get_desiderata_resource')) {
    $des_results = crl_desiderata_get_desiderata_resource($nid);
    if (!empty($des_results['haves'])) {
      $have_count = count($des_results['haves']);
    }
    if (!empty($des_results['wants'])) {
      $want_count = count($des_results['wants']);
    }
    $sub_count = $have_count + $want_count;
  }
  $summary['subscription_count'] = $sub_count;
  
  // Get the average vote info (fivestar)
  $active_tags = $vote_tally = $vote_average = 0;
  if (function_exists('fivestar_get_votes')) {
    $vote_tags = array('platform', 'content', 'cost');
    foreach ($vote_tags as $tag) {
      $vote_data = fivestar_get_votes('node', $nid, $tag);
      if (!empty($vote_data['average']['value'])) {
        $active_tags++;
        $vote_tally = $vote_tally + $vote_data['average']['value'];
      }
    }
  }
  if ($active_tags) {
    $vote_average = number_format(($vote_tally / $active_tags) / 20, 1);
  }
  $summary['vote_average'] = $vote_average;
  
  return $summary;
}



// ******** Helpers to construct special resource fields *********


// Custom field to show JISC details.
// @todo: make themeable and move out of computed field.
function computed_field_field_resource_all_jisc_details_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  $output = '';
  $jisc_id = crl_helpers_get_single_node_field($entity, 'field_jisc_id');
  $source_status = crl_helpers_get_single_node_field($entity, 'field_resource_source_status');
  // If the status flags this as a JISC display, and we have a JISC ID, then
  // display the JISC details fields.
  if (($source_status == 'jisc_only' || $source_status == 'jisc_crl_update') && !empty($jisc_id)) {
    $fields_array = array(
      'field_resource_jisc_full_text' => t("Full Text Linking"),
      'field_resource_jisc_federated' => t("Federated Searching"),
      'field_resource_jisc_marc' => t("Marc Records"),
      'field_resource_jisc_search' => t("Search Options"),
      'field_resource_jisc_post_search' => t("Post Search Options"),
      'field_resource_jisc_usage_stat' => t("Usage Statistics"),
      'field_resource_jisc_auth' => t("Authentication"),
      'field_resource_jisc_access' => t("Access"),
    );
    foreach ($fields_array as $key => $value) {
      $jisc_field = crl_helpers_get_single_node_field($entity, $key);
      if ($jisc_field) {
        $output .= '<h3>' . $value . '</h3>';
        $output .= $jisc_field;
      }
    }
  }
  // If this is a CRL review but we also have a JISC ID, show a note about
  // the fact that additional details may be available at JISC.
  elseif ($source_status == 'crl_review' && !empty($jisc_id)) {
    $output .= '<h3>' . t("Additional Details from JISC") . '</h3>';
    $output .= t("Additional details may be available in the !itemlink for this item from !sitelink", array('!itemlink' => crl_helpers_jisc_link(t('catalog entry'), $jisc_id), '!sitelink' => crl_helpers_jisc_link(t('JISC Collections'))));
  }
  return $output;
}


// Custom field to show the activity summary.
// @todo: make themeable and move out of computed field.
function computed_field_field_resource_full_crl_summary_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  $output = '';
  $data = crl_helpers_get_resource_summary($entity);
  
  // Add some helpful editor links.
  if (!empty($data['backref_entities'])) { // Activity data exists
    // Just get the first backref entity in the array (for now there should
    // just be one).
    $activity_entity = reset($data['backref_entities']);
    if (entity_access('update', 'node', $activity_entity)) {
      $output .= '<p style="text-align: right;"><strong>' . l('Edit activity details', 'node/' . $activity_entity->nid . '/edit', array('query' => array('destination' => current_path(), 'activity_title' => rawurlencode('Activity: ' . check_plain($entity->title))))) . '</strong></p>';
    }
  }
  else { // No activity data exists
    if (entity_access('create', 'node')) {
      $output .= '<p style="text-align: right;"><strong>' . l('Edit activity details', 'node/add/activity', array('query' => array('destination' => current_path(), 'activity_title' => rawurlencode('Activity: ' . check_plain($entity->title)), 'resource_id' => $entity->nid))) . '</strong></p>';
    }
  }
  
  $status_names = crl_helpers_activity_status_property_oplist();
  if (!empty($data['status'])) {
    foreach ($status_names as $status_key => $text) {
      $active_class = ' status-inactive';
      $des = ' - no';
      if (in_array($status_key, $data['status'])) {
        $active_class = ' status-active';
        $des = ' - yes';
      }
      $output .= '<span class="activity-report' . $active_class . '"><span class="summary-icon-small ' . $status_key . $active_class . '"></span>' . $status_names[$status_key] . $des . '</span><br/>';
    }
  }
  else {
    // $output .= t('No special CRL Status values are set for this resource');
  }
  $output .= '<br/><br/>';
  return $output;
}


// Helper function to build a link to a JISC resource
function crl_helpers_jisc_link($anchor, $jisc_id = NULL, $sub_path = 'Overview') {
  if (isset($jisc_id)) {
    if ($jisc_id == 0) {
      $path = 'http://www.jisc-collections.ac.uk/Catalogue';
    }
    else {
      $path = 'http://www.jisc-collections.ac.uk/Catalogue/' . $sub_path . '/Index/' . $jisc_id;
    }
  }
  else {
    $path = 'http://www.jisc-collections.ac.uk';
  }
  return l($anchor, $path, array('attributes' => array('target'=>'_blank')));
}


// Helper function to generate fixed "source" text based on status
function crl_helpers_source_text($source_status, $jisc_id) {
  $source_text = '';
  if ($source_status == 'crl_review') {
    $source_text = t('Data is the direct result of CRL research. Additional sources may also be referenced throughout.');
  }
  elseif ($source_status == 'stub') {
    $source_text = t('Data has been sourced form the CRL community. The information shown has not yet been confirmed by an authoritative source.');
  }
  elseif ($source_status == 'jisc_only' && !empty($jisc_id)) {
    $source_text = t('Data has been sourced from an !itemlink provided by !sitelink.', array('!itemlink' => crl_helpers_jisc_link(t('existing catalog entry'), $jisc_id), '!sitelink' => crl_helpers_jisc_link(t('JISC Collections'))));
  }
  elseif ($source_status == 'jisc_crl_update' && !empty($jisc_id)) {
   $source_text = t('Data has been sourced from an !itemlink provided by !sitelink, with additional edits from CRL.', array('!itemlink' => crl_helpers_jisc_link(t('existing catalog entry'), $jisc_id), '!sitelink' => crl_helpers_jisc_link(t('JISC Collections'))));
  }
  else {
    $source_text = t('Source details are unknown for this entry.');
  }
  return $source_text;
}


// Helper to get a single field value from a node entity. This takes care of
// all the language-specific management, etc. Will not work well for fields
// that have multiple values.
function crl_helpers_get_single_node_field($entity, $field_name) {
  $fields = field_get_items('node', $entity, $field_name);
  if (isset($fields[0]['value'])) {
    return $fields[0]['value'];
  }
  if (isset($fields[0]['target_id'])) {
    return $fields[0]['target_id'];
  }
  return FALSE;
}


/**
* Implementation of hook_views_api().
*/
function crl_helpers_views_api() {
  $path = drupal_get_path('module', 'crl_helpers');
  return array(
    'api' => 3.0,
    'path' => $path,
    'template path' => $path . '/themes',
  );
}


/**
 * Implements hook_views_pre_render().
 */
function crl_helpers_views_pre_render(&$view) {
  // Run entity pre-loading for resource list views. Each item shown on the
  // resource list view depends on data from other related entities, and it 
  // behooves us to load all those other entities at once (via an array passed
  // to entity_load) instead of one-by-one (via separate entity_load calls
  // for each item). Here we calculate which related items to load and get them
  // into the static cache in bulk before each individual item is rendered
  // internally by the view. This could also be done via clever tricks on the
  // view relationship settings, but we just do it here to keep the view itself
  // simple.
  $do_rlist_preloading = TRUE;
  if ($view->name == 'resource_lists' && $do_rlist_preloading) {
    $result_ids = array();
    foreach ($view->result as $result) {
      if (isset($result->entity)) {
        $result_ids[] = $result->entity;
      }
    }
    if (!empty($result_ids)) {
      // The view should have already loaded these into the static cache so
      // so this load should not cost anything.
      $entities = entity_load('node', $result_ids);
      // Get the related provider nodes and load them all at once.
      $provider_ids = array();
      foreach ($entities as $entity) {
        $provider_id = crl_helpers_get_single_node_field($entity, 'field_provider');
        if (isset($provider_id)) {
          $provider_ids[] = $provider_id;
        }
      }
      if (!empty($provider_ids)) {
        entity_load('node', $provider_ids);
      }
      // Get the related activity entities and load them all at once
      $activity_ids = array();
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node', '=')
            ->entityCondition('bundle', 'activity')
            ->fieldCondition('field_resource_reference', 'target_id', $result_ids, 'IN');
      $result = $query->execute();
      if (!empty($result['node'])) {
        $activity_ids = array_keys($result['node']);
        entity_load('node', $activity_ids);
      }
    }
  }
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function crl_helpers_form_activity_node_form_alter(&$form, &$form_state, $form_id) {
  // When updating an activity entity enforce some custom validation rules on
  // the CRL status settings.
  $form['#validate'][] = 'crl_helpers_activity_node_form_validate';
  // Hide the "review available" option as it's purely managed by the system.
  unset($form['field_activity_crl_status']['und']['#options']['a70_crl_review_available']);
  
  // Auto-fill some values if they are passed via the URL.
  if (!empty($_GET['resource_id'])) {
    $form['field_resource_reference']['und'][0]['target_id']['#default_value'] = 'ref(' . $_GET['resource_id'] . ')';
  }
  if (!empty($_GET['activity_title'])) {
    $form['title']['#default_value'] = rawurldecode($_GET['activity_title']);
  }
}


// Validation callback for activity_node_form
function crl_helpers_activity_node_form_validate(&$form, &$form_state) {
  $set_status = array();
  $language = $form['language']['#value'];
  if (!empty($form_state['values']['field_activity_crl_status'][$language])) {
    foreach($form_state['values']['field_activity_crl_status'][$language] as $item) {
      if (!empty($item['value'])) {
        $set_status[] = $item['value'];
      }
    }
  }
  // Handle case where an offer is set while another status is set that is
  // mutually exclusive.
  $dissallow_with_offer = array_intersect($set_status, array('a10_crl_desiderata', 'a20_license_under_consideration'));
  if (in_array('a30_license_available', $set_status) && !empty($dissallow_with_offer)) {
    form_set_error('field_activity_crl_status', t('"License Offer Available" cannot be set while "CRL Desiderata" or "License terms under consideration" are also set.'));
  }
  // Handle case where "License renewal available" is set without "License
  // available"
  if (in_array('a40_license_renewal_available', $set_status) && !in_array('a30_license_available', $set_status)) {
    form_set_error('field_activity_crl_status', t('"License Renewal Available" should only be set if "License Available" is also set.'));
  }
  $now = date('Y-m-d');
  // If the offer end date is not in the future the offer status should not
  // be set.
  if (in_array('a30_license_available', $set_status)) {
    if ($form_state['values']['field_activity_offer_duration'][$language][0]['value2'] < $now) {
      form_set_error('field_activity_offer_duration', t('"License Offer Available" cannot be set while the offer expiration date is either not set or is in the past.'));
    }
  }
  // If the trial end date is not in the future the "Trial Access Available"
  // status should not be set.
  if (in_array('a50_trial_access_available', $set_status)) {
    if ($form_state['values']['field_activity_trial_duration'][$language][0]['value2'] < $now) {
      form_set_error('field_activity_trial_duration', t('"Trial Access Available" cannot be set while the trial expiration date is either not set or is in the past.'));
    }
  }
}


function crl_helpers_node_view_alter(&$build) {
  if ($build['#bundle'] == 'activity') {
    $license_available = FALSE;
    $trial_access_available = FALSE;
    $unset_fields = array();
    if (!empty($build['#node']->field_activity_crl_status['und'])) {
      foreach ($build['#node']->field_activity_crl_status['und'] as $status) {
        if ($status['value'] == 'a30_license_available') {
          $license_available = TRUE;
        }
        if ($status['value'] == 'a50_trial_access_available') {
          $trial_access_available = TRUE;
        }
      }
    }
    if (!$license_available) {
      $unset_fields = array_merge($unset_fields, array('field_activity_offer_duration', 'field_activty_offer_terms', 'field_activity_get_started', 'field_activity_license_doc', 'field_activity_auth_form', 'field_activity_pricing_terms', 'field_activity_offer_notes'));
    }
    if (!$trial_access_available) {
      $unset_fields = array_merge($unset_fields, array('field_activity_trial_duration', 'field_trial_access_info', 'field_access_trial_url', 'field_activity_trial_notes'));
    }
    if (!empty($unset_fields)) {
      foreach($unset_fields as $field) {
        if (isset($build[$field])) {
          unset($build[$field]);
        }
      }
    }
  }
  
  if ($build['#bundle'] == 'resource') {
    if (empty($build['field_resource_all_jisc_details'][0]['#markup'])) {
      unset($build['field_resource_all_jisc_details']);
    }
  }
}
