<?php
// $Id

// Some constants.  Perhaps these should be module settings at some point
define('CRL_HELPERS_TOPIC_VID', 4); // The vocabulary ID of the 'Topic' 
                                    // taxonomy vocabulary.

// Pages with path aliases matching these paths are considered landing pages
// QUESTION: Is it best to implement this by matching paths or to look at the 
// page's location in a menu structure?
define('CRL_HELPERS_LANDING_PAGE_PATHS', <<<EOT
about
membership
collaborations
collections
services
archiving-preservation
EOT
);


/**
 * Display help and module information
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function crl_helpers_help() {
  $output = '';
  
  switch ($path) {
    case "admin/help#crl_helpers":
      $output = '<p>' . t("Provides helper functions, implements hooks to slightly alter default Drupal behavior, or encapsulates PHP snippets used throughout the site.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_e_mail_alter.
 *
 * This implementation gets rid of the Sender and Errors-To headers.  
 * These headers are, by default, set to the the e-mail address specified
 * at /admin/settings/site-information.  The setting of these headers cause
 * problems when trying to subscribe to a listserv as the result of a Webform
 * submission.
 *
 * See http://drupal.org/node/461324#comment-1716972 for more about this behavior.
 */
function crl_helpers_mail_alter(&$message) {
  unset($message['headers']['Sender']);
  unset($message['headers']['Errors-To']);
}

/**
 * Return the name of the menu that contains a node's menu item.
 */
function crl_helpers_node_get_menu_name($node) {
  $menu_name = db_result(db_query_range("SELECT menu_name FROM {menu_links} WHERE link_path = 'node/%d' AND module = 'menu'", $node->nid, 0, 1));
  return $menu_name;
}

/**
 * Determines if the current page is a jstor page.
 *
 * This function will have to be modified if the JSTOR pages are ever
 * moved in the menu structure.
 */
function crl_helpers_is_jstor_page() {
  $is_jstor_page = FALSE;
  $active_trail = menu_get_active_trail();

  if (isset($active_trail[1]) &&
      strpos($active_trail[1]['title'], 'JSTOR') !== FALSE) {
    $is_jstor_page = TRUE;
  }

  return $is_jstor_page;
}

/**
 * Determines if the current page is a topic guide.
 *
 * This function will have to be modified if the Topic Guide URL paths
 * ever change.
 */
function crl_helpers_is_topic_guide() {
  $is_topic_guide = FALSE;
  $alias = drupal_get_path_alias($_GET['q']);

  if (drupal_match_path($alias, 'collections/topics/*')) {
    $is_topic_guide = TRUE;
  }
  
  if (drupal_match_path($alias, 'guide/*')) {
    $is_topic_guide = TRUE;
  }


  return $is_topic_guide;
}

/**
 * Determines if the current page is a news or events page.
 */
function crl_helpers_is_news_events_page(){
  if (arg(0) == 'node') {
    $node = node_load(arg(1));
    if ($node->type == 'news' || $node->type == 'event') {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Determines if the current page is a news or events page.
 *
 * This function will have to be modified if the JSTOR pages are ever
 * moved in the menu structure.
 */
function crl_helpers_is_news_events_subpage() {
  $is_news_events_subpage = FALSE;

  $active_trail = menu_get_active_trail();

  // TODO: Finish implementing this.

  return $is_news_events_subpage;
}

/**

 * Determines if the current page is a landing page.
 *
 * Landing pages are pages at the top level of the navigation menu.
 */
function crl_helpers_is_landing_page() {
  $alias = drupal_get_path_alias($_GET['q']);

  $is_landing_page = drupal_match_path($alias, CRL_HELPERS_LANDING_PAGE_PATHS); 

  return $is_landing_page;
}

/**

 * Return a page node's type based on it's position in the menu structure.
 *
 * There are a number of pieces of content in the CRL site that are implemented
 * using the Page content type, but differ in some ways from a "normal" page.
 * These "special" pages may require different theming or other handling.
 * Typically, taxonomy is used to distinguish such pages, but the CRL site
 * relies on the menu structure to organize the site and distinguish different
 * types of content.  This function returns a string identifying the "type" of
 * a page node based on its position in the menu structure.
 *
 * @param node page node object.
 *
 * @return string identifying the "type" of the page. 
 */
function crl_helpers_get_page_type() {
  if (crl_helpers_is_jstor_page()) {
    $page_type = 'jstor-title-list-page';
  }
  else if (crl_helpers_is_news_events_subpage()) {
    $page_type = 'news-events-sub-page';
  }

  else if (crl_helpers_is_landing_page()) {
    $page_type = 'landing-page';
  }

  else {
    $page_type = 'page';
  }
  
  return $page_type;
}

/**
 * Implementation of hook_token_list().
 */

function crl_helpers_token_list($type = 'all') {
  if ($type == 'global' || $type == 'all') {
    // We don't implement any global tokens yet.
  }

  if ($type == 'node' || $type == 'all') {
    // Node tokens here
    $tokens['node']['crl-menupath-raw'] = t('A customized version of the [menupath-raw] token for the CRL menus that puts certain items (e.g. GRN) at the top level.');
  }

  return $tokens;
}

/**
 * Implementation of hook_token_values().
 */
function crl_helpers_token_values($type, $object = NULL) {
  $values = array();
  switch ($type) {
    case 'global':
      break;  
    case 'node':
      // Node tokens here.
      $node = $object;

      // This code is from token_node.inc:node_token_values() in the token 
      // token module.

      // Try to get the menu data.
      $mlid = db_result(db_query("SELECT mlid FROM {menu_links} WHERE link_path = '%s'", 'node/'. $node->nid));

      // Now get the menu related information.
      if (!empty($mlid) || !empty($node->menu['mlid']) || !empty($node->menu['plid'])) {
        $menu_link = menu_link_load($mlid);
        $menus = menu_get_menus();
        $menu = isset($menus[$menu_link['menu_name']]) ? $menus[$menu_link['menu_name']] : '';
        $trail_raw = _menu_titles($menu_link, $node->nid);

        $trail = array();
        foreach ($trail_raw as $title) {
          $trail[] = check_plain($title);
        }

        // This is how node_token generates the default tokens
        $value_menupath            = implode('/', $trail);
        $value_menupath_raw        = implode('/', $trail_raw);
        $value_menu                = check_plain($menu);
        $value_menu_raw            = $menu;
        $value_menu_link_title     = check_plain($menu_link['title']);
        $value_menu_link_title_raw = $menu_link['link_title'];
      }
      else {
        $value_menupath            = '';
        $value_menupath_raw        = '';
        $value_menu                = '';
        $value_menu_raw            = '';
        $value_menu_link_title     = '';
        $value_menu_link_title_raw = '';
      }

      // NOTE: You'll have to change this if statement if the menu that contains 
      // events ever changes.
      if ($menu_link['menu_name'] == 'menu-crl-events') {
        // If this item is in the events menu
        $value_crl_menupath_raw = $value_menupath_raw; // Start with the default ['menupath-raw']
        if (!empty($node->menu['plid'])) {
          // If the node has a parent in the menu, we want the token to be of
          // the form: Events/PARENT_NID/Title
          $plid = $node->menu['plid'];
          $parent_menu_link = menu_link_load($plid);
          $parent_link_path_parts = preg_split("/\//", $parent_menu_link['link_path']); 
          if (count($parent_link_path_parts) == 2 && 
              $parent_link_path_parts[0] == 'node') {
            $parent_nid = $parent_link_path_parts[1];
            $value_crl_menupath_raw = 'Events/' . $parent_nid . '/' . $value_menu_link_title_raw;
          }
        }
      }
      else {
        $value_crl_menupath_raw = $value_menupath_raw; // Start with the default ['menupath-raw']
        $value_crl_menupath_raw = str_replace('Collaborations/Area Studies', 'Area Studies',  $value_crl_menupath_raw);
        $value_crl_menupath_raw = str_replace('Collaborations/GRN', 'GRN', $value_crl_menupath_raw);
        $value_crl_menupath_raw = str_replace('Collaborations/Collaborative Digitization', 'Collaborative Digitization', $value_crl_menupath_raw);
      }

      $values['crl-menupath-raw'] = $value_crl_menupath_raw;
      break;
  }

  return $values;
}

/**
 * Get a Topic Guide node's term object for it's Topic vocabulary taxonomy term.
 *
 * @param $node - Topic Guide node.
 *
 * @return Taxonomy term object for the node's Topic vocabulary taxonomy term. NULL 
 *         if no such term exists.
 */
function crl_helpers_get_topic_guide_topic_term($node) {
  if (isset($node->taxonomy)) {
    foreach ($node->taxonomy as $term) {
      if ($term->vid == CRL_HELPERS_TOPIC_VID) {
        return $term;
      }
    }
  }

  return NULL; 
}

/**
 * Get a Topic Guide node's Topic vocabulary taxonomy term.
 *
 * @param $node - Topic guide node.
 *
 * @return String containing Topic vocabulary term name or NULL if there isn't one.
 *
 */
function crl_helpers_get_topic_guide_topic_name($node) {
  $term = crl_helpers_get_topic_guide_topic_term($node);
  if ($term !== NULL) {
    return $term->name;
  }
  else {
    return NULL;
  }
}

/**
 * Get a Topic Guide node's Topic vocabulary taxonomy term ID.
 *
 * @param $node - Topic guide node.
 *
 * @return  Integer containing Topic vocabulary term TID or NULL if there isn't one.
 *
 */
function crl_helpers_get_topic_guide_topic_tid($node) {
  $term = crl_helpers_get_topic_guide_topic_term($node);
  if ($term !== NULL) {
    return $term->tid;
  }
  else {
    return NULL;
  }
}

/**
 * Implementation of hook_menu_alter().
 */
function crl_helpers_menu_alter(&$items) {
  // Disable the default RSS feed.
  unset($items['rss.xml']);
}

/**
 * Use the phpsniff library to determine if the client's browser is supported. 
 */
function crl_helpers_is_unsupported_browser() {
  static $is_unsupported_browser = NULL;
  if (is_null($is_unsupported_browser)) {
    $phpsniff_path = drupal_get_path('module', 'crl_helpers') . '/phpsniff/phpSniff.class.php';
    if (file_exists($phpsniff_path)) { 
      // Load the phpsniff library and use it.
      require_once $phpsniff_path;
      $client = new phpSniff($_REQUEST['UA']);

      if ($client->browser_is('ie')) {
        if ($client->browser_is('ie7+')) {
          $is_unsupported_browser = FALSE;
        }
        else {
          $is_unsupported_browser = TRUE;
        }
      }
      else {
        $is_unsupported_browser = FALSE;
      }
    }
  }

  return $is_unsupported_browser;
}







/**
* This function adds a "reset" button to the views defined in $exposed_views
* Implementation of hook_form_alter().
*/
function crl_helpers_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    $exposed_views = array('page_assignments');
    if (in_array($form_state['view']->name, $exposed_views)) {
      $current_display = $form_state['view']->current_display;
      $form['reset'] = array(
        '#type' => 'markup',
        '#value' => '<input class="form-button" type="reset"
value="Reset" onClick="javascript:window.location=\'/'.
$form_state['view']->display[$current_display]->
display_options['path'] .'\';" />',
      );
    }
  }
}







/**
 * Implementation of hook_link().
 */
// Leave this here for a reference, but I decided to generate this link in the
// theme to be consistent with the Print/Share links.
//function crl_helpers_link($type, $object, $teaser = FALSE) {
  //$links = array();

  //if ($type == 'node' && isset($object->type) && $object->type == 'news') {
    //// Add a link to the news feed to News nodes.
    //$links['subscribe'] = array(
      //'title' => t('Subscribe'),
      //'href' => 'news/feed',
      //'attributes' => array('title' => t('Subscribe to the CRL News Feed.'),
                            //'class' => 'subscribe',),
    //);
  //}

  //return $links;
//}
