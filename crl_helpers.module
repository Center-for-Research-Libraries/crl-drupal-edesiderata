<?php
// $Id

/**
 * Display help and module information
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function crl_helpers_help() {
  $output = '';
  
  switch ($path) {
    case "admin/help#crl_helpers":
      $output = '<p>' . t("Provides helper functions, implements hooks to slightly alter default Drupal behavior, or encapsulates PHP snippets used throughout the site.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_e_mail_alter.
 *
 * This implementation gets rid of the Sender and Errors-To headers.  
 * These headers are, by default, set to the the e-mail address specified
 * at /admin/settings/site-information.  The setting of these headers cause
 * problems when trying to subscribe to a listserv as the result of a Webform
 * submission.
 *
 * See http://drupal.org/node/461324#comment-1716972 for more about this behavior.
 */
function crl_helpers_mail_alter(&$message) {
  unset($message['headers']['Sender']);
  unset($message['headers']['Errors-To']);
}

/**
 * Return the name of the menu that contains a node's menu item.
 */
function crl_helpers_node_get_menu_name($node) {
  $menu_name = db_result(db_query_range("SELECT menu_name FROM {menu_links} WHERE link_path = 'node/%d' AND module = 'menu'", $node->nid, 0, 1));
  return $menu_name;
}

/**
 * Determines if the current page is a jstor page.
 *
 * This function will have to be modified if the JSTOR pages are ever
 * moved in the menu structure.
 */
function crl_helpers_is_jstor_page() {
  $is_jstor_page = FALSE;
  $active_trail = menu_get_active_trail();

  if (isset($active_trail[1]) &&
      strpos($active_trail[1]['title'], 'JSTOR') !== FALSE) {
    $is_jstor_page = TRUE;
  }

  return $is_jstor_page;
}

/**
 * Determines if the current page is a topic guide.
 *
 * This function will have to be modified if the Topic Guide URL paths
 * ever change.
 */
function crl_helpers_is_topic_guide() {
  $is_topic_guide = FALSE;
  $alias = drupal_get_path_alias($_GET['q']);

  if (drupal_match_path($alias, 'collections/topics/*')) {
    $is_topic_guide = TRUE;
  }

  return $is_topic_guide;
}

/**
 * Determines if the current page is a news or events page.
 */
function crl_helpers_is_news_events_page(){
  if (arg(0) == 'node') {
    $node = node_load(arg(1));
    if ($node->type == 'news' || $node->type == 'event') {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Determines if the current page is a news or events page.
 *
 * This function will have to be modified if the JSTOR pages are ever
 * moved in the menu structure.
 */
function crl_helpers_is_news_events_subpage() {
  $is_news_events_subpage = FALSE;

  $active_trail = menu_get_active_trail();

  // TODO: Finish implementing this.

  return $is_news_events_subpage;
}

/**
 * Return a page node's type based on it's position in the menu structure.
 *
 * There are a number of pieces of content in the CRL site that are implemented
 * using the Page content type, but differ in some ways from a "normal" page.
 * These "special" pages may require different theming or other handling.
 * Typically, taxonomy is used to distinguish such pages, but the CRL site
 * relies on the menu structure to organize the site and distinguish different
 * types of content.  This function returns a string identifying the "type" of
 * a page node based on its position in the menu structure.
 *
 * @param node page node object.
 *
 * @return string identifying the "type" of the page. 
 */
function crl_helpers_get_page_type() {
  if (crl_helpers_is_jstor_page()) {
    $page_type = 'jstor-title-list';
  }
  else if (crl_helpers_is_news_events_subpage()) {
    $page_type = 'news-events-subpage';
  }
  else {
    $page_type = 'normal';
  }
  
  return $page_type;
}
