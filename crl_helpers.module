<?php

// Include status sync logic
require_once dirname(__FILE__) . '/includes/crl_helpers_desiderata_status_tools.inc';

/**
 * Implements hook_menu().
 */
function crl_helpers_menu() {
  $items['admin/config/crl'] = array(
    'title' => 'CRL Customizations',
    'description' => 'Options for CRL-specific Functionality.',
    'position' => 'right',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}

// Temporary cron tasks
function crl_helpers_cron() {
  if (module_exists('salesforce_api')) {
    $query = "SELECT Display_Name__c, Id, Member_ID__c From Account WHERE (Active__c = TRUE) AND (Member_Type__c = 'Voting' OR Member_Type__c = 'Group' OR Member_Type__c = 'Global') ORDER BY Name_for_sorting__c ASC";
    $sf_records = salesforce_api_query($query);
    $institutions_array_sfid = array();
    $institutions_array_id = array();
    $no_id_array = array();
    foreach ($sf_records as $record) {
      if (!empty($record->Id) && !empty($record->Display_Name__c)) {
        // For legacy support we want to be sure to store the 15 char version 
        // of the ID instead of the 18 char version returned in the query
        $record->Id = substr($record->Id, 0, 15);
        $institutions_array_sfid[$record->Id] = $record->Display_Name__c;
        if (!empty($record->Member_ID__c)) {
          $institutions_array_id[$record->Member_ID__c] = $record->Display_Name__c;
        }
        else {
          $no_id_array[$record->Id] = $record->Display_Name__c;
        }
      }
    }
    if (!empty($no_id_array)) {
      $institutions_sans_id = '';
      foreach($no_id_array as $value) {
        $institutions_sans_id .= $value . ", ";
      }
      watchdog('crl_sf', 'The following institutions have no CRL id in Salesforce: @institutions_sans_id', array('@institutions_sans_id' => $institutions_sans_id), WATCHDOG_WARNING);
    }
    variable_set('crl_sf_sync_institutions_array_sfid', $institutions_array_sfid);
    variable_set('crl_sf_sync_institutions_array_id', $institutions_array_id);
  }
  
  // Also do automated status checking for CRl activity entities, etc.
  $sync = new CrlResourceStatusSync();
  $sync->calculate_sync()->run_sync();
}


// ****** Construct block for resource summary content *******
function crl_helpers_block_info() {
  $blocks['crl_helpers_resource_summary'] = array(
    'info' => t('Resource Summary'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


function crl_helpers_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'crl_helpers_resource_summary':
      $nid = arg(1);
      $block['subject'] = '';
      $block['content'] = crl_helpers_resource_summary_builder($nid);
      break;
  }
  return $block;
}


// Callback to build the summary details for a resource
function crl_helpers_resource_summary_builder($nid) {
  $markup = '';
  // Load the entity from the nid. This should just reference the static cache
  // as the entity will probably already have been loaded once.
  $entities = entity_load('node', array($nid));
  if (!empty($entities[$nid])) {
    $entity = $entities[$nid];
    // @TODO: Perhaps split some of this out as a theme hook once the exact 
    // logic is finalized.
    $data = crl_helpers_get_resource_summary($entity);
    $markup .= check_markup($data['abstract'], 'full_html');
    $markup .= '<p><strong>Source: </strong>' . $data['source_text'] . '<p>';
    $highlights = array();
    if (!empty($data['status'])) {
      $status_options = crl_helpers_activity_status_property_oplist();
      foreach ($data['status'] as $status) {
        if ($status == 'license_renewal_available' || $status == 'past_license_offer') {
          //continue;
        }
        $highlights['r1'][] = '<span class="summary-icon ' . $status . '"></span>' . $status_options[$status];
      }
    }
    $highlights['r2'][] = '<span class="big_num">' . $data['comment_count'] . '</span> Comments';
    $highlights['r2'][] = '<span class="big_num">' . $data['subscription_count'] . '</span> Institutions Reporting';
    $highlights['r2'][] = '<span class="big_num">' . $data['vote_average'] . '</span> Average Rating';
    foreach($highlights as $row) {
      foreach ($row as $key => $highlight) {
        $markup .= '<div class="res_highlight">' . $highlight;
        if (isset($row[$key + 1])) {
          $markup .= '<span class="slasher">&nbsp;</span>';
        }
        else {
          $markup .= '<span class="slasher">&nbsp;</span>';
        }
        $markup .= '</div>';
      }
      $markup .= '<div class="clearfix"></div>';
    }
  }
  $output = array(
    'resource_summary' => array(
      '#type' => 'markup',
      '#markup' => $markup,
    ),
  );
  return $output;
}


// Views php field callback to build a summary "teaser" for view displays. We
// do this in code instead of with view fields (in the GUI) as it makes it
// easier to control the final rendering and isert some our out custom-computed
// elements.
function crl_helpers_resource_view_summary_builder($nid) {
  $markup = '';
  $entities = entity_load('node', array($nid)); // Should alerady be in static cache from view as we are using Search API
  if (!empty($entities[$nid])) {
    $entity = $entities[$nid];
    // @TODO: Perhaps split some of this out as a theme hook once the exact 
    // logic is finalized.
    $data = crl_helpers_get_resource_summary($entity);
    
    if (!empty($data['status'])) {
      $markup .= '<div class="view-teaser-status-icons">';
      $status_options = crl_helpers_activity_status_property_oplist();
      foreach ($data['status'] as $status) {
        if ($status == 'license_renewal_available' || $status == 'past_license_offer') {
          //continue;
        }
        $markup .= '<span class="summary-icon-small ' . $status . '" title="' . $status_options[$status] . '"></span>';
      }
      $markup .= '</div>';
    }
    
    $markup .= '<a href="' . url('node/' . $entity->nid) . '"><h2>' . check_plain($entity->title) . '</h2></a>';
    
    $input_form = drupal_render(crl_desiderata_get_input_form($nid));
    if (!empty($input_form)) {
      $markup .= '<div class="view-teaser-input-form">' . $input_form . '</div>';
    }
    $markup .= check_markup($data['abstract'], 'full_html');
    $provider_id = crl_helpers_get_single_node_field($entity, 'field_provider');
    if (isset($provider_id)) {
      $provider = entity_load('node', array($provider_id));
      if (isset($provider[$provider_id])) {
        $markup .= t('Provider') . ': ' . check_plain($provider[$provider_id]->title);
      }
    }
    $markup .= '<br/>' . t('Updated') . ': ' . format_date($entity->changed, 'medium_no_time');
    $markup .= '<div class="clearer"></div><br /><hr /><br />';
  }
  return $markup;
}



// Get resoruce summary values from a resource entity.
function crl_helpers_get_resource_summary($entity) {
  $nid = $entity->nid;
  $summary = array();
  $wrapper = entity_metadata_wrapper('node', $entity);
  
  // Get metadata values through Entity API
  $crl_statuses = $wrapper->crl_activity_backref->raw();
  foreach ($crl_statuses as $status) {
    if (!empty($status)) {
      $summary['status'][] = $status;
    }
  }
  
  // Get the abstract text through Entity API
  $abstract = $wrapper->body->raw();
  $summary['abstract'] = $abstract['safe_value'];
  
  // Get the source text
  $jisc_id = crl_helpers_get_single_node_field($entity, 'field_jisc_id');
  $source_status = crl_helpers_get_single_node_field($entity, 'field_resource_source_status');
  $summary['source_text'] = crl_helpers_source_text($source_status, $jisc_id);
  
  // Get the comment count
  $comment_count = 0;
  if (isset($entity->comment_count)) {
    $comment_count = $entity->comment_count;
  }
  $summary['comment_count'] = $comment_count;
  
  // Get the subscription count info
  $sub_count = $have_count = $want_count = 0;
  if (function_exists('crl_desiderata_get_desiderata_resource')) {
    $des_results = crl_desiderata_get_desiderata_resource($nid);
    if (!empty($des_results['haves'])) {
      $have_count = count($des_results['haves']);
    }
    if (!empty($des_results['wants'])) {
      $want_count = count($des_results['wants']);
    }
    $sub_count = $have_count + $want_count;
  }
  $summary['subscription_count'] = $sub_count;
  
  // Get the average vote info (fivestar)
  $active_tags = $vote_tally = $vote_average = 0;
  if (function_exists('fivestar_get_votes')) {
    $vote_tags = array('platform', 'content', 'cost');
    foreach ($vote_tags as $tag) {
      $vote_data = fivestar_get_votes('node', $nid, $tag);
      if (!empty($vote_data['average']['value'])) {
        $active_tags++;
        $vote_tally = $vote_tally + $vote_data['average']['value'];
      }
    }
  }
  if ($active_tags) {
    $vote_average = number_format(($vote_tally / $active_tags) / 20, 1);
  }
  $summary['vote_average'] = $vote_average;
  
  return $summary;
}



// ******** Helpers to construct special resource fields *********


// Custom field to show JISC details.
function computed_field_field_resource_all_jisc_details_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  $output = '';
  $jisc_id = crl_helpers_get_single_node_field($entity, 'field_jisc_id');
  $source_status = crl_helpers_get_single_node_field($entity, 'field_resource_source_status');
  // If the status flags this as a JISC display, and we have a JISC ID, then
  // display the JISC details fields.
  if (($source_status == 'jisc_only' || $source_status == 'jisc_crl_update') && !empty($jisc_id)) {
    $fields_array = array(
      'field_resource_jisc_full_text' => t("Full Text Linking"),
      'field_resource_jisc_federated' => t("Federated Searching"),
      'field_resource_jisc_marc' => t("Marc Records"),
      'field_resource_jisc_search' => t("Search Options"),
      'field_resource_jisc_post_search' => t("Post Search Options"),
      'field_resource_jisc_usage_stat' => t("Usage Statistics"),
      'field_resource_jisc_auth' => t("Authentication"),
      'field_resource_jisc_access' => t("Access"),
    );
    foreach ($fields_array as $key => $value) {
      $jisc_field = crl_helpers_get_single_node_field($entity, $key);
      if ($jisc_field) {
        $output .= '<h3>' . $value . '</h3>';
        $output .= $jisc_field;
      }
    }
  }
  // If this is a CRL review but we also have a JISC ID, show a note about
  // the fact that additional details may be available at JISC
  elseif ($source_status == 'crl_review' && !empty($jisc_id)) {
    $output .= '<h3>' . t("Additional Details from JISC") . '</h3>';
    $output .= t("Additional details may be available in the !itemlink for this item from !sitelink", array('!itemlink' => crl_helpers_jisc_link(t('catalog entry'), $jisc_id), '!sitelink' => crl_helpers_jisc_link(t('JISC Collections'))));
  }
  return $output;
}


// Helper function to build a link to a JISC resource
function crl_helpers_jisc_link($anchor, $jisc_id = NULL, $sub_path = 'Overview') {
  if (isset($jisc_id)) {
    if ($jisc_id == 0) {
      $path = 'http://www.jisc-collections.ac.uk/Catalogue';
    }
    else {
      $path = 'http://www.jisc-collections.ac.uk/Catalogue/' . $sub_path . '/Index/' . $jisc_id;
    }
  }
  else {
    $path = 'http://www.jisc-collections.ac.uk';
  }
  return l($anchor, $path, array('attributes' => array('target'=>'_blank')));
}


// Helper function to generate fixed "source" text based on status
function crl_helpers_source_text($source_status, $jisc_id) {
  $source_text = '';
  if ($source_status == 'crl_review') {
    $source_text = t('Data is the direct result of CRL research. Additional sources may also be referenced throughout.');
  }
  elseif ($source_status == 'stub') {
    $source_text = t('Data has been sourced form the CRL community. The information shown has not yet been confirmed by an authoritative source.');
  }
  elseif ($source_status == 'jisc_only' && !empty($jisc_id)) {
    $source_text = t('Data has been sourced from an !itemlink provided by !sitelink.', array('!itemlink' => crl_helpers_jisc_link(t('existing catalog entry'), $jisc_id), '!sitelink' => crl_helpers_jisc_link(t('JISC Collections'))));
  }
  elseif ($source_status == 'jisc_crl_update' && !empty($jisc_id)) {
   $source_text = t('Data has been sourced from an !itemlink provided by !sitelink, with additional edits from CRL.', array('!itemlink' => crl_helpers_jisc_link(t('existing catalog entry'), $jisc_id), '!sitelink' => crl_helpers_jisc_link(t('JISC Collections'))));
  }
  else {
    $source_text = t('Source details are unknown for this entry.');
  }
  return $source_text;
}


// Helper to get a single field value from a node entity. This takes care of
// all the language-specific management, etc. Will not work well for fields
// that have multiple values.
function crl_helpers_get_single_node_field($entity, $field_name) {
  $fields = field_get_items('node', $entity, $field_name);
  if (isset($fields[0]['value'])) {
    return $fields[0]['value'];
  }
  if (isset($fields[0]['target_id'])) {
    return $fields[0]['target_id'];
  }
  return FALSE;
}


/**
* Implementation of hook_views_api().
*/
function crl_helpers_views_api() {
  $path = drupal_get_path('module', 'crl_helpers');
  return array(
    'api' => 2.0,
    'path' => $path,
    'template path' => $path . '/themes',
  );
}


/**
 * Implements hook_views_pre_render().
 */
function crl_helpers_views_pre_render(&$view) {
  // Run entity pre-loading for resource list views. Each item shown on the
  // resource list view depends on data from other related entities, and it 
  // behooves us to load all those other entities at once (via an array passed
  // to entity_load) instead of one-by-one (via separate entity_load calls
  // for each item). Here we calculate which related items to load and get them
  // into the static cache in bulk before each individual item is rendered
  // internally by the view. This could also be done via clever tricks on the
  // view relationship settings, but we just do it here to keep the view itself
  // simple.
  $do_rlist_preloading = TRUE;
  if ($view->name == 'resource_lists' && $do_rlist_preloading) {
    $result_ids = array();
    foreach ($view->result as $result) {
      if (isset($result->entity)) {
        $result_ids[] = $result->entity;
      }
    }
    if (!empty($result_ids)) {
      // The view should have already loaded these into the static cache so
      // so this load should not cost anything.
      $entities = entity_load('node', $result_ids);
      // Get the related provider nodes and load them all at once.
      $provider_ids = array();
      foreach ($entities as $entity) {
        $provider_id = crl_helpers_get_single_node_field($entity, 'field_provider');
        if (isset($provider_id)) {
          $provider_ids[] = $provider_id;
        }
      }
      if (!empty($provider_ids)) {
        entity_load('node', $provider_ids);
      }
      // Get the related activity entities and load them all at once
      $activity_ids = array();
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node', '=')
            ->entityCondition('bundle', 'activity')
            ->fieldCondition('field_resource_reference', 'target_id', $result_ids, 'IN');
      $result = $query->execute();
      if (!empty($result['node'])) {
        $activity_ids = array_keys($result['node']);
        entity_load('node', $activity_ids);
      }
    }
  }
}