<?php

// Include status sync logic
require_once dirname(__FILE__) . '/includes/crl_helpers_desiderata_status_sync.inc';

/**
 * Implements hook_menu().
 */
function crl_helpers_menu() {
  $items['admin/config/crl'] = array(
    'title' => 'CRL Customizations',
    'description' => 'Options for CRL-specific Functionality.',
    'position' => 'right',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}

// Temporary cron tasks
function crl_helpers_cron() {
  if (module_exists('salesforce_api')) {
    $query = "SELECT Display_Name__c, Id, Member_ID__c From Account WHERE (Active__c = TRUE) AND (Member_Type__c = 'Voting' OR Member_Type__c = 'Group' OR Member_Type__c = 'Global') ORDER BY Name_for_sorting__c ASC";
    $sf_records = salesforce_api_query($query);
    $institutions_array_sfid = array();
    $institutions_array_id = array();
    $no_id_array = array();
    foreach ($sf_records as $record) {
      if (!empty($record->Id) && !empty($record->Display_Name__c)) {
        // For legacy support we want to be sure to store the 15 char version 
        // of the ID instead of the 18 char version returned in the query
        $record->Id = substr($record->Id, 0, 15);
        $institutions_array_sfid[$record->Id] = $record->Display_Name__c;
        if (!empty($record->Member_ID__c)) {
          $institutions_array_id[$record->Member_ID__c] = $record->Display_Name__c;
        }
        else {
          $no_id_array[$record->Id] = $record->Display_Name__c;
        }
      }
    }
    if (!empty($no_id_array)) {
      $institutions_sans_id = '';
      foreach($no_id_array as $value) {
        $institutions_sans_id .= $value . ", ";
      }
      watchdog('crl_sf', 'The following institutions have no CRL id in Salesforce: @institutions_sans_id', array('@institutions_sans_id' => $institutions_sans_id), WATCHDOG_WARNING);
    }
    variable_set('crl_sf_sync_institutions_array_sfid', $institutions_array_sfid);
    variable_set('crl_sf_sync_institutions_array_id', $institutions_array_id);
  }
  
  // Also do automated status checking for CRl activity entities, etc.
  $sync = new CrlResourceStatusSync();
  $sync->calculate_sync()->run_sync();
}


// ****** Construct block for resource summary content *******
function crl_helpers_block_info() {
  $blocks['crl_helpers_resource_summary'] = array(
    'info' => t('Resource Summary'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


function crl_helpers_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'crl_helpers_resource_summary':
      $nid = arg(1);
      $block['subject'] = '';
      $block['content'] = crl_helpers_resource_summary_builder($nid);
      break;
  }
  return $block;
}


function crl_helpers_resource_summary_builder($nid) {
  $entities = entity_load('node', array($nid));
  $entity = $entities[$nid];
  
  // How to get metadata values through Entity API
  //$wrapper = entity_metadata_wrapper('node', $entity);
  //$value = $wrapper->crl_activity_backref->raw();
  //dpm($value, 'value');
  
  $jisc_id = field_get_items('node', $entity, 'field_jisc_id');
  $source_status = field_get_items('node', $entity, 'field_resource_source_status');
  // Get the comment count
  $comment_count = 0;
  if (isset($entity->comment_count)) {
    $comment_count = $entity->comment_count;
  }
  // Get the subscription count info
  $sub_count = $have_count = $want_count = 0;
  if (function_exists('crl_desiderata_get_desiderata_resource')) {
    $des_results = crl_desiderata_get_desiderata_resource($nid);
    if (!empty($des_results['haves'])) {
      $have_count = count($des_results['haves']);
    }
    if (!empty($des_results['wants'])) {
      $want_count = count($des_results['wants']);
    }
    $sub_count = $have_count + $want_count;
  }
  // Get the average vote info (fivestar)
  $active_tags = $vote_tally = $vote_average = 0;
  if (function_exists('fivestar_get_votes')) {
    $vote_tags = array('platform', 'content', 'cost');
    foreach ($vote_tags as $tag) {
      $vote_data = fivestar_get_votes('node', $nid, $tag);
      if (!empty($vote_data['average']['value'])) {
        $active_tags++;
        $vote_tally = $vote_tally + $vote_data['average']['value'];
      }
    }
  }
  if ($active_tags) {
    $vote_average = number_format(($vote_tally / $active_tags) / 20, 1);
  }
  
  $markup = $entity->body[$entity->language][0]['safe_value'];
  $markup .= '<p><strong>Source: </strong>' . crl_helpers_source_text($source_status[0]['value'], $jisc_id[0]['value']) . '<p>';
  $markup .= '<div class="res_highlight"><span class="big_num">' . $comment_count . '</span> Comments';
  $markup .= '<span class="slasher">/</span></div>';
  $markup .= '<div class="res_highlight"><span class="big_num">' . $sub_count . '</span> Institutions Reporting';
  $markup .= '<span class="slasher">/</span></div>';
  $markup .= '<div class="res_highlight"><span class="big_num">' . $vote_average . '</span> Average Rating';
  $markup .= '<span class="slasher">/</span></div>';
  
  
$markup_old = '<table>
<tbody><tr style="background: none;">
<td style="width: 32%; border-right: 1px solid #ddd; vertical-align: top;">
<strong>Feedback:</strong>
<p style="margin: 1em 0em 0.1em 0em;">
<span class="big_num">3.5</span> average user rating<br>
<span class="big_num">0</span> comments<br>
<a href="#" id="openrating">submit your feedback</a>
</p>
</td>
<td style="width: 32%; border-right: 1px solid #ddd; vertical-align: top;">
<strong>CRL Activity:</strong>
<p style="margin: 1em 0em 0.1em 0em; line-height: 2.5em;"><strong>Full Review,</strong></p><strong>
</strong><p><strong>Offer Under Negotiation</strong><br>
<a href="#" id="openoffers">view the details</a></p>
</td>
<td style="vertical-align: top;">
<strong>Desiderata:</strong>
<p style="margin: 1em 0em 0.1em 0em;">
<span class="big_num">3</span> institutions <strong>have</strong> this<br>
<span class="big_num">6</span> institutions <strong>want</strong> this<br>
<a href="#">submit your status</a>
</p>
</td>
</tr>
</tbody></table>';
  
  $output = array(
    'resource_summary' => array(
      '#type' => 'markup',
      '#markup' => $markup,
    ),
  );
  return $output;
}


function crl_helpers_resource_view_summary_builder($nid) {
  $markup = '';
  $entities = entity_load('node', array($nid)); // Should alerady be in static cache from view as we are using Search API
  $entity = $entities[$nid];
  $jisc_id = crl_helpers_get_single_node_field($entity, 'field_jisc_id');
  $source_status = crl_helpers_get_single_node_field($entity, 'field_resource_source_status');
  $markup .= '<p><strong>Source: </strong>' . crl_helpers_source_text($source_status, $jisc_id) . '<p>';
  print $markup;
}


// ******** Helpers to construct special resource fields *********


// Custom field to show JISC details.
function computed_field_field_resource_all_jisc_details_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  $output = '';
  $jisc_id = crl_helpers_get_single_node_field($entity, 'field_jisc_id');
  $source_status = crl_helpers_get_single_node_field($entity, 'field_resource_source_status');
  // If the status flags this as a JISC display, and we have a JISC ID, then
  // display the JISC details fields.
  if (($source_status == 'jisc_only' || $source_status == 'jisc_crl_update') && !empty($jisc_id)) {
    $fields_array = array(
      'field_resource_jisc_full_text' => t("Full Text Linking"),
      'field_resource_jisc_federated' => t("Federated Searching"),
      'field_resource_jisc_marc' => t("Marc Records"),
      'field_resource_jisc_search' => t("Search Options"),
      'field_resource_jisc_post_search' => t("Post Search Options"),
      'field_resource_jisc_usage_stat' => t("Usage Statistics"),
      'field_resource_jisc_auth' => t("Authentication"),
      'field_resource_jisc_access' => t("Access"),
    );
    foreach ($fields_array as $key => $value) {
      $jisc_field = crl_helpers_get_single_node_field($entity, $key);
      if ($jisc_field) {
        $output .= '<h3>' . $value . '</h3>';
        $output .= $jisc_field;
      }
    }
  }
  // If this is a CRL review but we also have a JISC ID, show a note about
  // the fact that additional details may be available at JISC
  elseif ($source_status == 'crl_review' && !empty($jisc_id)) {
    $output .= '<h3>' . t("Additional Details from JISC") . '</h3>';
    $output .= t("Additional details may be available in the !itemlink for this item from !sitelink", array('!itemlink' => crl_helpers_jisc_link(t('catalog entry'), $jisc_id), '!sitelink' => crl_helpers_jisc_link(t('JISC Collections'))));
  }
  return $output;
}


// Helper function to build a link to a JISC resource
function crl_helpers_jisc_link($anchor, $jisc_id = NULL, $sub_path = 'Overview') {
  if (isset($jisc_id)) {
    if ($jisc_id == 0) {
      $path = 'http://www.jisc-collections.ac.uk/Catalogue';
    }
    else {
      $path = 'http://www.jisc-collections.ac.uk/Catalogue/' . $sub_path . '/Index/' . $jisc_id;
    }
  }
  else {
    $path = 'http://www.jisc-collections.ac.uk';
  }
  return l($anchor, $path, array('attributes' => array('target'=>'_blank')));
}


// Helper function to generate fixed "source" text based on status
function crl_helpers_source_text($source_status, $jisc_id) {
  $source_text = '';
  if ($source_status == 'crl_review') {
    $source_text = t('Data is the direct result of CRL research. Additional sources may also be referenced throughout.');
  }
  elseif ($source_status == 'stub') {
    $source_text = t('Data has been sourced form the CRL community. The information shown has not yet been confirmed by an authoritative source.');
  }
  elseif ($source_status == 'jisc_only' && !empty($jisc_id)) {
    $source_text = t('Data has been sourced from an !itemlink provided by !sitelink.', array('!itemlink' => crl_helpers_jisc_link(t('existing catalog entry'), $jisc_id), '!sitelink' => crl_helpers_jisc_link(t('JISC Collections'))));
  }
  elseif ($source_status == 'jisc_crl_update' && !empty($jisc_id)) {
   $source_text = t('Data has been sourced from an !itemlink provided by !sitelink, with additional edits from CRL.', array('!itemlink' => crl_helpers_jisc_link(t('existing catalog entry'), $jisc_id), '!sitelink' => crl_helpers_jisc_link(t('JISC Collections'))));
  }
  else {
    $source_text = t('Source details are unknown for this entry.');
  }
  return $source_text;
}


// Helper to get a single field value from a node entity. This takes care of
// all the language-specific management, etc. Will not work well for fields
// that have multiple values.
function crl_helpers_get_single_node_field($entity, $field_name) {
  $fields = field_get_items('node', $entity, $field_name);
  if (isset($fields[0]['value'])) {
    return $fields[0]['value'];
  }
  return FALSE;
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * 
 * When updating an activity entity enforce some custom validation rules on
 * the CRL status settings.
 */
function crl_helpers_form_activity_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'crl_helpers_activity_node_form_validate';
}


// Validation callback for activity_node_form
function crl_helpers_activity_node_form_validate(&$form, &$form_state) {
  $set_status = array();
  $language = $form['language']['#value'];
  if (!empty($form_state['values']['field_activity_crl_status'][$language])) {
    foreach($form_state['values']['field_activity_crl_status'][$language] as $item) {
      if (!empty($item['value'])) {
        $set_status[] = $item['value'];
      }
    }
  }
  // Handle case where an offer is set while another status is set that is
  // mutually exclusive.
  $dissallow_with_offer = array_intersect($set_status, array('crl_desiderata', 'license_under_consideration'));
  if (in_array('license_available', $set_status) && !empty($dissallow_with_offer)) {
    form_set_error('field_activity_crl_status', t('"License Offer Available" cannot be set while "CRL Desiderata" or "License terms under consideration" are also set.'));
  }
  // Handle case where "License renewal available" is set without "License
  // available"
  if (in_array('license_renewal_available', $set_status) && !in_array('license_available', $set_status)) {
    form_set_error('field_activity_crl_status', t('"License Renewal Available" should only be set if "License Available" is also set.'));
  }
  $now = date('Y-m-d');
  // If the offer end date is not in the future the offer status should not
  // be set.
  if (in_array('license_available', $set_status)) {
    if ($form_state['values']['field_activity_offer_duration'][$language][0]['value2'] < $now) {
      form_set_error('field_activity_offer_duration', t('"License Offer Available" cannot be set while the offer expiration date is either not set or is in the past.'));
    }
  }
  // If the trial end date is not in the future the "Trial Access Available"
  // status should not be set.
  if (in_array('trial_access_available', $set_status)) {
    if ($form_state['values']['field_activity_trial_duration'][$language][0]['value2'] < $now) {
      form_set_error('field_activity_trial_duration', t('"Trial Access Available" cannot be set while the trial expiration date is either not set or is in the past.'));
    }
  }
}





/*****************************************************************************/
/****        Additions to manage CRL Status Metadata on Resource          ****/
/*****************************************************************************/


/**
 * Implements hook_entity_property_info_alter().
 * 
 * Add a new entity property that will be used to define the formal CRL status
 * associated with any given resource.
 */
function crl_helpers_entity_property_info_alter(&$info) {
  $properties = &$info['node']['properties'];
  $properties['crl_activity_backref'] = array(
    'label' => t("CRL Actvity Status Through Backreference"),
    'type' => 'list<text>',
    'description' => t("Gets CRL Actvity Status Through Backreference."),
    'getter callback' => 'crl_helpers_activity_status_property_get',
    'options list' => 'crl_helpers_activity_status_property_oplist',
  );
}


// Callback function to actaully calculate the status associated with a
// resource. This function queires numerous places and aggregates the results
// into this one entity property.
function crl_helpers_activity_status_property_get($entity, array $options, $name, $type, $info) {
  $now = date('Y-m-d');
  $computed_status = array();
  list($id) = entity_extract_ids($type, $entity);
  // Get the activity entries that reference this resource.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node', '=')
        ->entityCondition('bundle', 'activity')
        ->fieldCondition('field_resource_reference', 'target_id', $id, '=');
  $result = $query->execute();
  // Load the related activity entities and get the status set on them.
  if (!empty($result['node'])) {
    $backref_nids = array_keys($result['node']);
    // Consider revisting to fetch one field instead of full node_load, see:
    // http://btmash.com/article/2012-04-13/i-just-want-one-field-using-fieldattachload
    $backref_nodes = node_load_multiple($backref_nids);
    foreach ($backref_nodes as $nid => $node) {
      // Get the raw status values set on the activity entity and aggregate
      // them directly into our computed result.
      $statuses = field_get_items('node', $node, 'field_activity_crl_status');
      if (!empty($statuses)) {
        foreach ($statuses as $status) {
          if (!in_array($status['value'], $computed_status)) {
            $computed_status[] = $status['value'];
          }
        }
      }
      // See if this activity entity containes an offer that's now expired, and
      // if so set the "Past (expired) offer" setting.
      $offer_duration = field_get_items('node', $node, 'field_activity_offer_duration');
      if (isset($offer_duration[0]['value2'])) {
        if ($offer_duration[0]['value2'] < $now && !in_array('past_license_offer', $computed_status)) {
          $computed_status[] = 'past_license_offer';
        }
      }
    }
  }
  // Also see if this resource has a source status that indicates it's a full
  // CRL review.
  $source_status = crl_helpers_get_single_node_field($entity, 'field_resource_source_status');
  if ($source_status == 'crl_review' && !in_array('crl_review_available', $computed_status)) {
    $computed_status[] = 'crl_review_available';
  }
  return $computed_status;
}


// Callback to centrally define the key|value pairs used for the various
// CRL status options. This may be called via multiple contexts.
function crl_helpers_activity_status_property_oplist($arg1) {
  // Define fields set be editors on activity entity.
  $options = array(
    'crl_desiderata' => t('CRL Desiderata'),
    'license_under_consideration' => t('License terms under consideration'),
    'license_available' => t('License offer available'),
    'license_renewal_available' => t('License renewal available'),
    'trial_access_available' => t('Trial access available'),
  );
  // If $arg1['id'] is set this is probably being called while a node is being
  // edited. In this case we do NOT want to add the following system-managed
  // fields to the options array.
  if (!isset($arg1['id'])) {
    $options_sys = array(
      'crl_review_available' => t('CRL Review available'),
      'past_license_offer' => t('Past (expired) license offer'),
    );
    $options = array_merge($options, $options_sys); 
  }
  return $options;
}


/**
 * Implements hook_entity_update().
 * 
 * Whenever we save a change to an activity entity, we also want to be sure
 * to mark any related resource entities as "dirty". This ensures that the
 * related resource will be re-indexed with updated CRL status metadata.
 */
function crl_helpers_entity_update($entity, $type) {
  $dirty_ids = array();
  if ($type == 'node' && isset($entity->type)) {
    if ($entity->type == 'activity') {
      $refs = field_get_items('node', $entity, 'field_resource_reference');
      foreach ($refs as $ref) {
        $dirty_ids[] = $ref['target_id'];
      }
    }
    if (!empty($dirty_ids)) {
      search_api_track_item_change('node', $dirty_ids);
    }
  }
}