<?php


/**
 * @file
 * General case-specific customizations for the eDesiderata site.
 */


// Include logic for custom fields.
require_once dirname(__FILE__) . '/includes/crl_helpers_custom_fields.inc';


/**
 * Implements hook_menu().
 */
function crl_helpers_menu() {
  $items['admin/config/crl'] = array(
    'title' => 'CRL Customizations',
    'description' => 'Options for CRL-specific Functionality.',
    'position' => 'right',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}


/**
 * Implements hook_entity_info_alter().
 */
function crl_helpers_entity_info_alter(&$entity_info) {
  // Add an optional "embedded" view mode to some content types.
  $entity_info['node']['view modes']['embedded'] = array(
    'label' => t('Embedded'),
    'custom settings' => TRUE,
  );
}


/**
 * Implements hook_cron().
 */
function crl_helpers_cron() {
  // Sync institution picklist from Salesforce
  _crl_sf_sync_picklist();
}


/**
 * Implements hook_theme().
 */
function crl_helpers_theme() {
  return array(
    // Theme hook to generate our custom facet breadcrumb.
    'crl_helpers_facet_breadcrumb' => array(
      'variables' => array('breadcrumb' => array()),
      'path' => drupal_get_path('module', 'crl_helpers') . '/themes',
      'file' => 'crl_helpers.theme.inc',
    ),
    // Theme hook to generate editor tools.
    'crl_helpers_editor_tools' => array(
      'variables' => array(),
      'path' => drupal_get_path('module', 'crl_helpers') . '/themes',
      'file' => 'crl_helpers.theme.inc',
    ),
  );
}


/**
 * Implements hook_block_info().
 */
function crl_helpers_block_info() {
  // The facet breadcrumb is a block that can be displayed on the top of a
  // resoruce index.
  $blocks['crl_helpers_facet_breadcrumb'] = array(
    'info' => t('CRL Facet Breadcrumb'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  // The editor tools block shows links and info just for editors.
  $blocks['crl_helpers_editor_tools'] = array(
    'info' => t('CRL Editor Tools'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function crl_helpers_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    // Render the facet breadcrumb block.
    case 'crl_helpers_facet_breadcrumb':
      $block['subject'] = '';
      $output = '';
      if (isset($_GET['f']) || isset($_GET['search_api_views_fulltext'])) {
        $output = array(
          'facet_breadcrumb' => array(
            '#theme' => 'crl_helpers_facet_breadcrumb',
          ),
        );
      }
      $block['content'] = $output;
      break;
    case 'crl_helpers_editor_tools':
      $block['subject'] = '';
      $output = array(
        'editor_tools' => array(
          '#theme' => 'crl_helpers_editor_tools',
        ),
      );
      $block['content'] = $output;
      break;
  }
  return $block;
}


/**
 * Helper to fetch the institution picklist from Salesforce.
 * 
 * @see: crl_helpers_cron().
 */
function _crl_sf_sync_picklist() {
  if (module_exists('salesforce_api')) {
    // Query MEMBER institutions.
    $query = "SELECT Display_Name__c, Id, Member_ID__c From Account WHERE (Active__c = TRUE) AND (Member_Type__c = 'Voting' OR Member_Type__c = 'Group' OR Member_Type__c = 'Global') ORDER BY Name_for_sorting__c ASC";
    $sf_records = salesforce_api_query($query);
    $institutions_array_sfid = array();
    $institutions_array_id = array();
    $no_id_array = array();
    if (!empty($sf_records)) {
      foreach ($sf_records as $record) {
        if (!empty($record->Id) && !empty($record->Display_Name__c)) {
          $institutions_array_sfid[$record->Id] = $record->Display_Name__c;
          if (!empty($record->Member_ID__c)) {
            $institutions_array_id[$record->Member_ID__c] = $record->Display_Name__c;
          }
          else {
            $no_id_array[$record->Id] = $record->Display_Name__c;
          }
        }
      }
      if (!empty($no_id_array)) {
        $institutions_sans_id = '';
        foreach($no_id_array as $value) {
          $institutions_sans_id .= $value . ", ";
        }
        watchdog('crl_sf', 'The following member institutions have no CRL id in Salesforce: @institutions_sans_id', array('@institutions_sans_id' => $institutions_sans_id), WATCHDOG_WARNING);
      }
      // Set explicit variabled for each of the id types
      variable_set('crl_sf_sync_institutions_array_sfid', $institutions_array_sfid);
      variable_set('crl_sf_sync_institutions_array_crlid', $institutions_array_id);
      // Then choose one which will be used as the default (for referece by
      // applications that don't distinguish which type of ID to use).
      variable_set('crl_sf_sync_institutions_array', $institutions_array_sfid);
    } 
    // Also query ALL institutions and build array for admin purposes.
    // @todo see if this logic could be better merged with the code above.
    $query_full = "SELECT Display_Name__c, Id From Account WHERE Parent_Member_Type__c = NULL ORDER BY Name_for_sorting__c ASC";
    $sf_records_full = salesforce_api_query($query_full);
    $institutions_array_sfid_full = array();
    if (!empty($sf_records_full)) {
      foreach ($sf_records_full as $record) {
        if (!empty($record->Id) && !empty($record->Display_Name__c)) {
          $display_name = $record->Display_Name__c;
          // See if this is also a member inst and alter label if so.
          if (array_key_exists($record->Id, $institutions_array_sfid)) {
            $display_name = $display_name . ' (MEMBER)';
          }
          $institutions_array_sfid_full[$record->Id] = $display_name;
        }
      }
      variable_set('crl_sf_sync_institutions_array_full', $institutions_array_sfid_full);
    }
  }
}


/**
 * Implements hook_filter_info().
 */
function crl_helpers_filter_info() {
  $filters['crl_content_tokens'] = array(
    'title' => t('CRL content tokens'),
    'description' => t('Replace tokens in content areas with fixed values.'),
    'process callback' => '_crl_helpers_content_tokens',
    'cache' => FALSE,
  );
  return $filters;
}


/**
 * Callback to process the custom "crl content tokens" filter.
 * 
 * @see crl_helpers_filter_info().
 */
function _crl_helpers_content_tokens($text, $filter, $format, $langcode, $cache, $cache_id) {
  $text = str_replace('[provider]', '<img class="from-provider-icon" title="Direct from Publisher" src="/' . drupal_get_path('module', 'crl_helpers') . '/images/icon_publisher.png">', $text);
  $text = str_replace('[crl_login_url]', url('user', array('query' => array('destination' => current_path()))), $text);
  $text = str_replace('[crl_signup_url]', url('user/register', array('query' => array('destination' => current_path()))), $text);
  return $text;
}


/**
 * Helper function to get the institution info (either the iid for a user or
 * the name of an institution based on a given iid).
 */
function crl_helpers_get_institution($iid = NULL) {
  $institutions_array_id = variable_get('crl_sf_sync_institutions_array', array());
  // If we have an iid, then we return the institution name
  if (isset($iid)) {
    if (isset($institutions_array_id[$iid])) {
      return $institutions_array_id[$iid];
    }
    else {
      return t('Unknown');
    }
  }
  // If we don't have an iid then we are checking for it based on the user's
  // info. Also be sure to only run this check once per page.
  static $user_institution_id;
  if (!empty($user_institution_id)) {
    return $user_institution_id;
  }
  global $user;
  $account = user_load($user->uid);
  $entity_wrapper = entity_metadata_wrapper('user', $account);
  $iid = isset($entity_wrapper->field_institution) ? $entity_wrapper->field_institution->value() : NULL;
  if (!empty($iid) && isset($institutions_array_id[$iid])) {
    $user_institution_id = $iid;
    return $iid;
  } 
  return FALSE;  
}


/**
 * Implements hook_preprocess_HOOK().
 * 
 * We display titles with delta blocks, so this provides a way to do some
 * special title alterations at the last min. This is a bit of a hack.
 */
function crl_helpers_preprocess_delta_blocks_page_title(&$vars) {
  $altered = FALSE;
  $altered_text = '';
  $query = drupal_get_query_parameters();
  if (!empty($query['f'][0])) {
    switch ($query['f'][0]) {
      case 'crl_resource_status_backref:crl_review_available':
        $altered = TRUE;
        $altered_text = t('Resources - CRL Reviews');
        break;
      case 'crl_resource_status_backref:license_available':
        $altered = TRUE;
        $altered_text = t('Resources - CRL Offers');
        break;
      case 'crl_resource_status_backref:crl_desiderata':
        $altered = TRUE;
        $altered_text = t('Resources - CRL Pipeline');
        break;
    }
  }
  if (drupal_is_front_page()) {
    $altered = TRUE;
    $altered_text = '';
  }
  if ($altered) {
    $vars['page_title'] = $altered_text;
  }
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * 
 * HACK fix for fivestar conflict with comment previews.
 * @todo remove this after fix lands for https://drupal.org/node/1289832
 */
function crl_helpers_form_comment_form_alter(&$form, &$form_state, $form_id) {
  unset($form['comment_output_below']);
}
