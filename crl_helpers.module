<?php


/**
 * @file
 * General case-specific customizations for the eDesiderata site.
 */


// Include logic for custom relatioships.
require_once dirname(__FILE__) . '/includes/crl_helpers_custom_relationships.inc';
// Include logic for custom fields.
require_once dirname(__FILE__) . '/includes/crl_helpers_custom_fields.inc';
// Include logic for auto status sync.
require_once dirname(__FILE__) . '/includes/crl_helpers_resource_status_sync.inc';


/**
 * Implements hook_menu().
 */
function crl_helpers_menu() {
  $items['admin/config/crl'] = array(
    'title' => 'CRL Customizations',
    'description' => 'Options for CRL-specific Functionality.',
    'position' => 'right',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}


/**
* Implements hook_entity_info_alter().
*/
function crl_helpers_entity_info_alter(&$entity_info) {
  // Add an optional "embedded" view mode to some content types.
  $entity_info['node']['view modes']['embedded'] = array(
    'label' => t('Embedded'),
    'custom settings' => TRUE,
  );
}


/**
 * Implements hook_cron().
 */
function crl_helpers_cron() {
  // Sync inst picklist
  _crl_sf_sync_picklist();
  // Also do automated status checking for CRL activity entities, etc.
  $sync = new CrlResourceStatusSync();
  $sync->calculate_sync()->run_sync();
}


/**
* Implements hook_views_api().
*/
function crl_helpers_views_api() {
  $path = drupal_get_path('module', 'crl_helpers');
  return array(
    'api' => 3.0,
    'path' => $path,
    'template path' => $path . '/themes',
  );
}


/**
 * Implements hook_theme().
 */
function crl_helpers_theme() {
  return array(
    // Theme hook to generate a resource teaser (used in views rows).
    'crl_helpers_resource_teaser' => array(
      'variables' => array('nid' => NULL),
      'path' => drupal_get_path('module', 'crl_helpers') . '/themes',
      'file' => 'crl_helpers.theme.inc',
    ),
    // Theme hook to generate a full resource summary (used at top of resource).
    'crl_helpers_resource_summary' => array(
      'variables' => array('nid' => NULL),
      'path' => drupal_get_path('module', 'crl_helpers') . '/themes',
      'file' => 'crl_helpers.theme.inc',
    ),
    // Theme hook to generate a resource status summary (used at top of
    // the activity tab).
    'crl_helpers_resource_status_summary' => array(
      'variables' => array('data' => array(), 'status_names' => array(), 'edit_link' => ''),
      'path' => drupal_get_path('module', 'crl_helpers') . '/themes',
      'file' => 'crl_helpers.theme.inc',
    ),
    // Theme hook to generate our custom facet breadcrumb.
    'crl_helpers_facet_breadcrumb' => array(
      'variables' => array('breadcrumb' => array()),
      'path' => drupal_get_path('module', 'crl_helpers') . '/themes',
      'file' => 'crl_helpers.theme.inc',
    ),
  );
}


/**
 * Implements hook_block_info().
 */
function crl_helpers_block_info() {
  // The resource summary is a block at the top of each resoruce.
  $blocks['crl_helpers_resource_summary'] = array(
    'info' => t('CRL Resource Summary'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  // The facet breadcrumb is a block that can be displayed on the top of a
  // resoruce index.
  $blocks['crl_helpers_facet_breadcrumb'] = array(
    'info' => t('CRL Facet Breadcrumb'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function crl_helpers_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    // Render the resoruce summary block.
    case 'crl_helpers_resource_summary':
      $block['subject'] = '';
      $output = array(
        'resource_summary' => array(
          '#theme' => 'crl_helpers_resource_summary',
          '#nid' => arg(1),
        ),
      );
      $block['content'] = $output;
      break;
    // Render the facet breadcrumb block.
    case 'crl_helpers_facet_breadcrumb':
      $block['subject'] = '';
      $output = '';
      if (isset($_GET['f']) || isset($_GET['search_api_views_fulltext'])) {
        $output = array(
          'facet_breadcrumb' => array(
            '#theme' => 'crl_helpers_facet_breadcrumb',
          ),
        );
      }
      $block['content'] = $output;
      break;
  }
  return $block;
}


/**
 * Get all the resoruce summary values for a resource entity.
 * 
 * @param object $entity
 *   A resoruce entity.
 * @return array
 *   An associative array of summary information for this resource.
 */
function crl_helpers_get_resource_summary($entity) {
  $nid = $entity->nid;
  static $summary_cache = array();
  
  // Start with the general backref info. The functions called inside this logic
  // implement their own layers of static caching, so we shouldn't duplicate
  // that caching here.
  $backref_summary = crl_helpers_get_backref_summary($entity);

  // Then get the rest of the summary info. This information we can maintain
  // in our own static cache.
  if (empty($summary_cache[$nid])) {
    // Get the abstract text through Entity API
    $wrapper = entity_metadata_wrapper('node', $entity);
    $abstract = $wrapper->body->raw();
    $summary['abstract'] = $abstract['value'];

    // Get the source text
    $jisc_id = crl_helpers_get_single_node_field($entity, 'field_jisc_id');
    $source_status = crl_helpers_get_single_node_field($entity, 'field_resource_source_status');
    $summary['source_text'] = crl_helpers_source_text($source_status, $jisc_id);
    // Get the comment count
    $comment_count = 0;
    if (isset($entity->comment_count)) {
      $comment_count = $entity->comment_count;
    }
    $summary['comment_count'] = $comment_count;
    // Get the subscription count info
    $sub_count = $have_count = $want_count = 0;
    if (function_exists('crl_desiderata_get_desiderata_resource')) {
      $des_results = crl_desiderata_get_desiderata_resource($nid);
      if (!empty($des_results['haves'])) {
        $have_count = count($des_results['haves']);
      }
      if (!empty($des_results['wants'])) {
        $want_count = count($des_results['wants']);
      }
      $sub_count = $have_count + $want_count;
    }
    $summary['subscription_count'] = $sub_count;
    // Get the average vote info (fivestar)
    $active_tags = $vote_tally = $vote_average = 0;
    if (function_exists('fivestar_get_votes')) {
      $vote_tags = array('platform', 'content', 'cost');
      foreach ($vote_tags as $tag) {
        $vote_data = fivestar_get_votes('node', $nid, $tag);
        if (!empty($vote_data['average']['value'])) {
          $active_tags++;
          $vote_tally = $vote_tally + $vote_data['average']['value'];
        }
      }
    }
    if ($active_tags) {
      $vote_average = number_format(($vote_tally / $active_tags) / 20, 1);
    }
    $summary['vote_average'] = $vote_average;
    $summary_cache[$nid] = $summary;
  }
  // Return the full merged summary.
  return array_merge($backref_summary, $summary_cache[$nid]);
}


/**
 * Helper function to build a link to a JISC resource.
 * 
 * @param string $anchor
 *   The anchor text to use in the link.
 * @param int $jisc_id
 *   The ID to a JISC resrouce. If non-zero the link will point to that specific
 *   resource, if "0" the link will point to the JISC catalog index and if NULL
 *   the link will point to the JISC homepage.
 * @param string $sub_path
 *   The sub-path, or tab, of a resource to point to. Only applies for a
 *   non-zero JISC id. 
 * @return string
 *   A formatted link to JISC.
 */
function crl_helpers_jisc_link($anchor, $jisc_id = NULL, $sub_path = 'Overview') {
  if (isset($jisc_id)) {
    if ($jisc_id == 0) {
      $path = 'http://www.jisc-collections.ac.uk/Catalogue';
    }
    else {
      $path = 'http://www.jisc-collections.ac.uk/Catalogue/' . $sub_path . '/Index/' . $jisc_id;
    }
  }
  else {
    $path = 'http://www.jisc-collections.ac.uk';
  }
  return l($anchor, $path, array('attributes' => array('target'=>'_blank')));
}


/**
 * Helper function to generate fixed "source" text based on resoruce status.
 * 
 * @param string $source_status
 *   The source status of a resoruce (based on the selected key of the
 *   resource's "source status" field).
 * @param int $jisc_id
 *   The ID to a JISC resrouce if JISC is a source.
 * @return string
 *   The source text to display.
 */
function crl_helpers_source_text($source_status, $jisc_id) {
  $source_text = '';
  if ($source_status == 'crl_review') {
    $source_text = t('Data is the direct result of CRL research. Additional sources may also be referenced throughout.');
  }
  elseif ($source_status == 'stub') {
    $source_text = t('Data has been sourced form the CRL community. The information shown has not yet been confirmed by an authoritative source.');
  }
  elseif ($source_status == 'jisc' && !empty($jisc_id)) {
    $source_text = t('Data has been sourced from an !itemlink provided by !sitelink.', array('!itemlink' => crl_helpers_jisc_link(t('existing catalog entry'), $jisc_id), '!sitelink' => crl_helpers_jisc_link(t('JISC Collections'))));
  }
  elseif ($source_status == 'jisc_crl_update' && !empty($jisc_id)) {
   $source_text = t('Data has been sourced from an !itemlink provided by !sitelink, with additional edits from CRL.', array('!itemlink' => crl_helpers_jisc_link(t('existing catalog entry'), $jisc_id), '!sitelink' => crl_helpers_jisc_link(t('JISC Collections'))));
  }
  else {
    $source_text = t('Source details are unknown for this entry.');
  }
  return $source_text;
}


/**
 * Helper to get a single field value from a node entity.
 * 
 * This takes care of all the language-specific management, etc. Will not work
 * well for fields that have multiple values.
 * 
 * @param object $entity
 *   The entity a field belongs to.
 * @param string $field_name
 *   The field name to fetch a value from.
 * @return mixed
 *   The raw value of the field (or the first field entry for a multi-value
 *   field).
 */
// Helper to get a single field value from a node entity. This takes care of
// all the language-specific management, etc. Will not work well for fields
// that have multiple values.
function crl_helpers_get_single_node_field($entity, $field_name) {
  $fields = field_get_items('node', $entity, $field_name);
  if (isset($fields[0]['value'])) {
    return $fields[0]['value'];
  }
  if (isset($fields[0]['target_id'])) {
    return $fields[0]['target_id'];
  }
  return FALSE;
}


/**
 * Implements hook_views_pre_render().
 */
function crl_helpers_views_pre_render(&$view) {
  // Run entity pre-loading for resource list views. Each item shown on the
  // resource list view depends on data from other related entities, and it 
  // behooves us to load all those other entities at once (via an array passed
  // to entity_load) instead of one-by-one (via separate entity_load calls
  // for each item). Here we calculate which related items to load and get them
  // into the static cache in bulk before each individual item is rendered
  // internally by the view. This could also be done via clever tricks on the
  // view relationship settings, but we just do it here to keep the view itself
  // simple.
  $do_rlist_preloading = TRUE;
  if ($view->name == 'resource_lists' && $do_rlist_preloading) {
    $result_ids = array();
    foreach ($view->result as $result) {
      if (isset($result->entity)) {
        $result_ids[] = $result->entity;
      }
    }
    if (!empty($result_ids)) {
      // The view should have already loaded these into the static cache so
      // so this load should not cost anything.
      $entities = entity_load('node', $result_ids);
      // Get the related provider nodes and load them all at once.
      $provider_ids = array();
      foreach ($entities as $entity) {
        $provider_id = crl_helpers_get_single_node_field($entity, 'field_provider');
        if (isset($provider_id)) {
          $provider_ids[] = $provider_id;
        }
      }
      if (!empty($provider_ids)) {
        entity_load('node', $provider_ids);
      }
      // Get the related activity entities and load them all at once.
      $activity_ids = array();
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node', '=')
            ->entityCondition('bundle', 'activity')
            ->fieldCondition('field_resource_reference', 'target_id', $result_ids, 'IN');
      $result = $query->execute();
      if (!empty($result['node'])) {
        $activity_ids = array_keys($result['node']);
        entity_load('node', $activity_ids);
      }
    }
  }
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * 
 * Add some customizations and validation rules for the activity node edit form.
 */
function crl_helpers_form_activity_node_form_alter(&$form, &$form_state, $form_id) {
  // When updating an activity entity enforce some custom validation rules on
  // the CRL status settings.
  $form['#validate'][] = 'crl_helpers_activity_node_form_validate';
  // Hide the "review available" option as it's purely managed by the system.
  unset($form['field_activity_crl_status'][$form['field_activity_crl_status']['#language']]['#options']['crl_review_available']);
  
  // Auto-fill some values if they are passed via the URL.
  if (!empty($_GET['resource_id'])) {
    $form['field_resource_reference'][$form['field_resource_reference']['#language']][0]['target_id']['#default_value'] = 'ref(' . $_GET['resource_id'] . ')';
  }
  if (!empty($_GET['activity_title'])) {
    $form['title']['#default_value'] = rawurldecode($_GET['activity_title']);
  }
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * 
 * Add some customizations for the resource node edit form.
 */
function crl_helpers_form_resource_node_form_alter(&$form, &$form_state, $form_id) {
  // If we are adding a resource post a popup that reminds editors to create a
  // provider entry first.
  if (drupal_match_path(current_path(), 'node/add/resource') && empty($form_state['values'])) {
    $message = t('REMINDER: Please ensure that the provider for this resource is listed in the provider picklist (the orange box) before entering any data on this form. If it is not yet listed please create a new provider entry in the system before entering any data here.');
    drupal_add_js('jQuery(document).ready(function () { alert("' . $message . '"); });', 'inline');
  }
}


/**
 * Validation callback for activity_node_form.
 * 
 * @see crl_helpers_form_activity_node_form_alter().
 */
function crl_helpers_activity_node_form_validate(&$form, &$form_state) {
  $set_status = array();
  $language = $form['language']['#value'];
  if (!empty($form_state['values']['field_activity_crl_status'][$language])) {
    foreach($form_state['values']['field_activity_crl_status'][$language] as $item) {
      if (!empty($item['value'])) {
        $set_status[] = $item['value'];
      }
    }
  }
  // Handle case where an offer is set while another status is set that is
  // mutually exclusive.
  $dissallow_with_offer = array_intersect($set_status, array('crl_desiderata', 'license_under_consideration'));
  if (in_array('license_available', $set_status) && !empty($dissallow_with_offer)) {
    form_set_error('field_activity_crl_status', t('"License Offer Available" cannot be set while "CRL Desiderata" or "License terms under consideration" are also set.'));
  }
  // Handle case where "License renewal available" is set without "License
  // available"
  if (in_array('license_renewal_available', $set_status) && !in_array('license_available', $set_status)) {
    form_set_error('field_activity_crl_status', t('"License Renewal Available" should only be set if "License Available" is also set.'));
  }
  $now = date('Y-m-d');
  // If the offer end date is not in the future the offer status should not
  // be set.
  if (in_array('license_available', $set_status)) {
    if ($form_state['values']['field_activity_offer_duration'][$language][0]['value2'] < $now) {
      form_set_error('field_activity_offer_duration', t('"License Offer Available" cannot be set while the offer expiration date is either not set or is in the past.'));
    }
  }
  // If the trial end date is not in the future the "Trial Access Available"
  // status should not be set.
  if (in_array('trial_access_available', $set_status)) {
    if ($form_state['values']['field_activity_trial_duration'][$language][0]['value2'] < $now) {
      form_set_error('field_activity_trial_duration', t('"Trial Access Available" cannot be set while the trial expiration date is either not set or is in the past.'));
    }
  }
}


/**
 * Implements hook_node_view_alter().
 * 
 * Add custom show/hide display logic on activity and resource nodes.
 */
function crl_helpers_node_view_alter(&$build) {
  // Checks for activity nodes.
  if ($build['#bundle'] == 'activity') {
    $license_available = FALSE;
    $trial_access_available = FALSE;
    $unset_fields = array();
    $status_array = field_get_items('node', $build['#node'], 'field_activity_crl_status');
    if (!empty($status_array)) {
      foreach ($status_array as $status) {
        if ($status['value'] == 'license_available') {
          $license_available = TRUE;
        }
        if ($status['value'] == 'trial_access_available') {
          $trial_access_available = TRUE;
        }
      }
    }
    if (!$license_available) {
      $unset_fields = array_merge($unset_fields, array('field_activity_offer_duration', 'field_activty_offer_terms', 'field_activity_get_started', 'field_activity_license_doc', 'field_activity_auth_form', 'field_activity_pricing_terms', 'field_activity_offer_notes'));
    }
    if (!$trial_access_available) {
      $unset_fields = array_merge($unset_fields, array('field_activity_trial_duration', 'field_trial_access_info', 'field_access_trial_url', 'field_activity_trial_notes'));
    }
    if (!empty($unset_fields)) {
      foreach($unset_fields as $field) {
        if (isset($build[$field])) {
          unset($build[$field]);
        }
      }
    }
  }
  
  if ($build['#bundle'] == 'resource') {
    if (empty($build['field_resource_all_jisc_details'][0]['#markup'])) {
      unset($build['field_resource_all_jisc_details']);
    }
  }
}


/**
 * Helper to fetch the institution picklist from Salesforce.
 * 
 * @see: crl_helpers_cron().
 */
function _crl_sf_sync_picklist() {
  if (module_exists('salesforce_api')) {
    $query = "SELECT Display_Name__c, Id, Member_ID__c From Account WHERE (Active__c = TRUE) AND (Member_Type__c = 'Voting' OR Member_Type__c = 'Group' OR Member_Type__c = 'Global') ORDER BY Name_for_sorting__c ASC";
    $sf_records = salesforce_api_query($query);
    $institutions_array_sfid = array();
    $institutions_array_id = array();
    $no_id_array = array();
    if (!empty($sf_records)) {
      foreach ($sf_records as $record) {
        if (!empty($record->Id) && !empty($record->Display_Name__c)) {
          // $record->Id = substr($record->Id, 0, 15);
          $institutions_array_sfid[$record->Id] = $record->Display_Name__c;
          if (!empty($record->Member_ID__c)) {
            $institutions_array_id[$record->Member_ID__c] = $record->Display_Name__c;
          }
          else {
            $no_id_array[$record->Id] = $record->Display_Name__c;
          }
        }
      }
      if (!empty($no_id_array)) {
        $institutions_sans_id = '';
        foreach($no_id_array as $value) {
          $institutions_sans_id .= $value . ", ";
        }
        watchdog('crl_sf', 'The following institutions have no CRL id in Salesforce: @institutions_sans_id', array('@institutions_sans_id' => $institutions_sans_id), WATCHDOG_WARNING);
      }
      // Set explicit variabled for each of the id types
      variable_set('crl_sf_sync_institutions_array_sfid', $institutions_array_sfid);
      variable_set('crl_sf_sync_institutions_array_crlid', $institutions_array_id);
      // Then choose one which will be used as the default (for referece by
      // applications that don't distinguish which type of ID to use).
      variable_set('crl_sf_sync_institutions_array', $institutions_array_sfid);
    }
  }
}


/**
 * Implements hook_filter_info().
 */
function crl_helpers_filter_info() {
  $filters['crl_content_tokens'] = array(
    'title' => t('CRL content tokens'),
    'description' => t('Replace tokens in content areas with fixed values.'),
    'process callback' => '_crl_helpers_content_tokens',
    'cache' => FALSE,
  );
  return $filters;
}


/**
 * Callback to process the custom "crl content tokens" filter.
 * 
 * @see crl_helpers_filter_info().
 */
function _crl_helpers_content_tokens($text, $filter, $format, $langcode, $cache, $cache_id) {
  $text = str_replace('[provider]', 'Provider', $text);
  return $text;
}
