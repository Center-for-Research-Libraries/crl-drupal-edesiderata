<?php


/**
 * Implements hook_field_extra_fields().
 *
 * Define numerous psuedo fields.
 */
function crl_resource_field_extra_fields() {
  $extra['node']['resource'] = array(
    'display' => array(
      'pseudo_field_resource_status_summary' => array(
        'label' => t('Resource Status Summary Table'),
        'description' => t('A resoruce status summary table.'),
        'weight' => 900,
      ),
      'pseudo_field_resource_provider_details' => array(
        'label' => t('Resource Provider Details - Embedded'),
        'description' => t('An "embedded" display of the providers details that are related to the resource'),
        'weight' => 902,
      ),
      'pseudo_field_resource_activity' => array(
        'label' => t('Resource Activity - Embedded'),
        'description' => t('An "embedded" display of the activity details that are related to the resource'),
        'weight' => 903,
      ),
      'pseudo_field_resource_coll_content_tax' => array(
        'label' => t('Resource Collection Content Taxonomy'),
        'description' => t('Show (or re-display) collection content taxonomy values.'),
        'weight' => 904,
      ),
      'pseudo_field_resource_source_summary' => array(
        'label' => t('Resource Source Summary'),
        'description' => t('A brief CRL source summary for a resource based on source status.'),
        'weight' => 905,
      ),
      'pseudo_field_resource_table_sources' => array(
        'label' => t('Resource Table Source Legend'),
        'description' => t('A sources legend for resource tablefields.'),
        'weight' => 906,
      ),
      'pseudo_field_resource_review_source' => array(
        'label' => t('Resource Review Source'),
        'description' => t('Source information specific to a CRL review.'),
        'weight' => 907,
      ),
      'pseudo_field_resource_added' => array(
        'label' => t('Resource Added Date'),
        'description' => t('The date the resource was added.'),
        'weight' => 908,
      ),
      'pseudo_field_resource_updated' => array(
        'label' => t('Resource Updated Date'),
        'description' => t('The date the resource was updated.'),
        'weight' => 909,
      ),
      'pseudo_field_resource_alerts' => array(
        'label' => t('Resource Alerts'),
        'description' => t('Show any resource alert details.'),
        'weight' => 910,
      ),
    ),
  );
  return $extra;
}


/**
 * Implements hook_node_view().
 *
 * Attach custom display elements to a resource node that's about to be
 * rendered (custom pseudo fields, etc.).
 */
function crl_resource_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'resource') {
    // Get info about which extra fields are visible in this view mode.
    $extra_fields_display = field_extra_fields_get_display('node', $node->type, $view_mode);
    // In this specific hook we will only actually build the extra fields
    // defined by this module.
    $extra_fields_to_build = crl_resource_field_extra_fields();
    $display_elements = new CrlResourceDisplayElements($node);
    foreach($extra_fields_to_build['node']['resource']['display'] as $field_name => $details) {
      if (isset($extra_fields_display[$field_name]['visible']) && $extra_fields_display[$field_name]['visible']) {
        $node->content[$field_name] = $display_elements->buildField($field_name);
      }
    }
  }
}


/**
 * Implements hook_page_build().
 */
function crl_resource_page_build(&$page) {
  // Do some custom title alterations for resource lists when select filter
  // combinations are active.
  $query = drupal_get_query_parameters();
  if (!empty($query['f'][0])) {
    switch ($query['f'][0]) {
      case 'crl_resource_status_backref:crl_review_available':
        drupal_set_title(t('Resources - CRL Reviews'));
        break;
      case 'crl_resource_status_backref:license_available':
        drupal_set_title(t('Resources - CRL Offers'));
        break;
      case 'crl_resource_status_backref:crl_desiderata':
        drupal_set_title(t('Resources - CRL Pipeline'));
        break;
    }
  }
}


/**
 * Implements hook_menu().
 */
function crl_resource_menu() {
  // Menu item for the resource suggestion summary page.
  $items['resources/suggestions'] = array(
    'title' => 'Resource Suggestions',
    'description' => 'Resource suggestions summary page.',
    'page callback' => 'crl_resource_suggest_page',
    'file' => 'includes/crl_resource_suggest.page.inc',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function crl_resource_theme() {
  $hooks = array(
    // Theme hook to generate a resource status summary field (used at top of
    // the activity tab within a resource).
    'crl_resource_field_status_summary' => array(
      'variables' => array('action_links' => '', 'status' => array(), 'status_options' => array(), 'status_descriptions' => array()),
    ),
    // Theme hook to generate a publisher legend field.
    'crl_resource_publisher_legend' => array(
      'variables' => array('icon_alt_title' => '', 'icon_text' => ''),
    ),
    // Theme hook to generate a resource alert tag.
    'crl_resource_alert_tag' => array(
      'variables' => array('url' => ''),
    ),
    // Theme hook to generate a countdown alert tag.
    'crl_resource_countdown_alert_tag' => array(
      'variables' => array('url' => '', 'days_left' => NULL, 'long' => FALSE),
    ),
    // Theme hook to generate a resource teaser (used in views rows). This will
    // automatically get used by views based on its name and the standard
    // template suggestion rules. We must formally declare it to ensure our
    // custom preprocess functions get used, etc.
    'views_view_fields__resource_lists' => array(
      'variables' => array(),
      'template' => 'views-view-fields--resource-lists',
    ),
  );
  foreach ($hooks as &$hook) {
    // Make sure that our actual theme hooks and/or preprocessor logic is
    // included for each entry.
    $hook['path'] = drupal_get_path('module', 'crl_resource') . '/themes';
    $hook['file'] = 'crl_resource.theme.inc';
  }
  return $hooks;
}


/**
 * Implements hook_views_api().
 */
function crl_resource_views_api() {
  $path = drupal_get_path('module', 'crl_resource');
  return array(
    'api' => 3.0,
    'path' => $path,
    // We could add a template path here to allow views template suggestions to
    // be automatically picked-up from a module subdirectory, but that seems
    // to cause issues with some custom preprocessor hooks that related to these
    // template suggestions (they don't get called). Instead we manually
    // declare all templates, and their paths, in hook_theme().
    // 'template path' => $path . '/themes',
  );
}


/**
 * Implements hook_entity_property_info_alter().
 *
 * Define some special resource properties (many calculated via backreferences
 * between activity and resource entries). Note that most of these are just
 * meant to be used when displaying a single entity or for use in a Search API
 * index. None of these have a schema so they aren't meant for display with
 * SQL-based views.
 */
function crl_resource_entity_property_info_alter(&$info) {
  // These all apply specifically to resources, so we could add them to a
  // $info['node']['resource']['properties'] group, but then they might not
  // be indexable on a generic node index (via search API).
  $properties = &$info['node']['properties'];
  // Fetch the ids of all entities that point to a resource through a
  // field_resource_reference field.
  $properties['crl_resource_backref'] = array(
    'label' => t("CRL Resource Backreference"),
    'type' => 'list<node>',
    'info' => field_info_field('field_resource_reference'),
    'description' => t("Backward reference to resource via field_resource_reference."),
    'getter callback' => 'crl_resource_get_backref',
  );
  // Define the formal CRL status associated with any given resource based on
  // the aggregated status of any backreferenced activity.
  $properties['crl_resource_status_backref'] = array(
    'label' => t("CRL Resource Status Backreference"),
    'type' => 'list<text>',
    'description' => t("Gets CRL resource status through backreference."),
    'getter callback' => 'crl_resource_get_status_backref',
    'options list' => 'crl_resource_status_calc_property_oplist',
    'entity views field' => TRUE,
  );
  // Get the "master" update timestamp (the most recent timestamp between a
  // resource and all its activity).
  $properties['crl_resource_master_update_timestamp'] = array(
    'label' => t("CRL Resource Master Update Timestamp"),
    'type' => 'date',
    'entity views field' => TRUE,
    'description' => t("Get the master update timestamp (the most recent timestamp between a resource and all its activity)"),
    'getter callback' => 'crl_resource_get_master_update_timestamp',
  );
  // See if an alert is active on a resource or any of its backreferenced
  // activity.
  $properties['crl_resource_alert'] = array(
    'label' => t("CRL Resource Alert"),
    'type' => 'boolean',
    'entity views field' => TRUE,
    'description' => t("See if a resource has an alert associated with it (through either the resource itself or backreferenced activity)."),
    'getter callback' => 'crl_resource_get_alert',
  );
  // Get the expiration date for a resource that has backreferenced activity
  // with soon-to-be expiration.
  $properties['crl_resource_expiration_date'] = array(
    'label' => t("CRL Resource Expiration Date"),
    'type' => 'date',
    'entity views field' => TRUE,
    'description' => t("Get the expiration date for a resource that has backreferenced activity with soon-to-be expiration."),
    'getter callback' => 'crl_resource_get_expiration_date',
  );
  // Get the offer days remaining for a resource that has backreferenced
  // activity with soon-to-be expiration.
  $properties['crl_resource_expiration_countdown'] = array(
    'label' => t("CRL Resource Expiration Countdown"),
    'type' => 'integer',
    'entity views field' => TRUE,
    'description' => t("Get the offer days remaining for a resource that has backreferenced activity with soon-to-be expiration."),
    'getter callback' => 'crl_resource_get_expiration_countdown',
  );
  // Get the vote average. NOTE: requires extra queries (does not just use
  // loaded entity data).
  $properties['crl_resource_vote_average'] = array(
    'label' => t("CRL Resource Vote Average"),
    'type' => 'decimal',
    'description' => t("Get the average of votes across all fivestar dimentions that apply to resoruces."),
    'getter callback' => 'crl_resource_get_vote_average',
  );
}


/**
 * Properties getter callback: calculate backreferences.
 *
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_backref($entity, array $options, $name, $type, $info) {
  // If we are not working with a resoruce (e.g., building a generic node search
  // index), we can just return a generic value.
  if (empty($entity->type) || $entity->type != 'resource') {
    return array();
  }
  // Calculate the backreferences. We store these in a static cache.
  static $backrefs = array();
  if (!isset($backrefs[$entity->nid])) {
    $backrefs[$entity->nid] = array();
    // Get the entities that reference this resource through the
    // field_resource_reference field.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node', '=')
          ->entityCondition('bundle', 'activity')
          ->fieldCondition('field_resource_reference', 'target_id', $entity->nid, '=')
          ->propertyOrderBy('created', 'DESC');
    // Force query to run without access checks. If we remove the tag below then
    // status values will reflect the current user's access permissions (status
    // values will not appear for activity entries they do not have access to)
    // which could be a very good thing. However, this will cause problems when
    // this code is called though cron when resoruce content is being indexed.
    // This is because cron can only run as one user (anon by default) so the
    // indexed (facet) data can't be user-specific. For now, we just override
    // access control for all cases but may need to think more about how to deal
    // with this.
    $query->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
    $result = $query->execute();
    if (!empty($result['node'])) {
      $backrefs[$entity->nid] = array_keys($result['node']);
    }
  }
  return $backrefs[$entity->nid];
}


/**
 * Properties getter callback: calculate aggregate backreferenced status.
 *
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_status_backref($entity, array $options, $name, $type, $info) {
  // If we are not working with a resoruce (e.g., building a generic node search
  // index), we can just return a generic value.
  if (empty($entity->type) || $entity->type != 'resource') {
    return array();
  }
  $wrappers = crl_resource_get_wrappers($entity);
  $r_entity_wrapper = $wrappers['r_entity_wrapper'];
  $a_entity_wrappers = $wrappers['a_entity_wrappers'];
  $computed_status = array();
  // This function has the captity to AGGREGATE all status from ALL activty.
  // However, we currently only want to grab the status from the most RECENT
  // activity entry, so we only grab that value from the array. The alternative
  // (aggregate) behavior could be re-activied by commenting-out the line below.
  $a_entity_wrappers = array(reset($a_entity_wrappers)); // Comment-out for alt AGGREGATE bahavior.
  foreach ($a_entity_wrappers as $a_entity_wrapper) {
    // Get the raw status values set on the activity entity and
    // aggregate them directly into our computed result.
    $statuses = isset($a_entity_wrapper->field_activity_crl_status) ? $a_entity_wrapper->field_activity_crl_status->value() : array();
    if (!empty($statuses)) {
      foreach ($statuses as $status) {
        if (!in_array($status, $computed_status)) {
          $computed_status[] = $status;
        }
      }
    }
  }
  // Also see if this resource has a source status that indicates it's a
  // full CRL review (that status value is always calculated dynamically).
  $source_status = isset($r_entity_wrapper->field_resource_source_status) ? $r_entity_wrapper->field_resource_source_status->value() : NULL;
  if ($source_status == 'crl_review' && !in_array('crl_review_available', $computed_status)) {
    $computed_status[] = 'crl_review_available';
  }
  return $computed_status;
}


/**
 * Properties getter callback: get the "master" update timestamp (the most
 * recent timestamp between a resource and all its activity).
 *
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_master_update_timestamp($entity, array $options, $name, $type, $info) {
  $updated = isset($entity->changed) ? $entity->changed : 0;
  // If we are not working with a resoruce (e.g., building a generic node search
  // index), we can just return a generic value.
  if (empty($entity->type) || $entity->type != 'resource') {
    return $updated;
  }
  $wrappers = crl_resource_get_wrappers($entity);
  $wrappers_to_check = array_merge(array($wrappers['r_entity_wrapper']), $wrappers['a_entity_wrappers']);
  foreach ($wrappers_to_check as $wrapper) {
    $timestamp = $wrapper->changed->value();
    if ($timestamp > $updated) {
      $updated = $timestamp;
    }
  }
  return $updated;
}


/**
 * Properties getter callback: calculate alerts through backreferences.
 *
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_alert($entity, array $options, $name, $type, $info) {
  // If we are not working with a resoruce (e.g., building a generic node search
  // index), we can just return a generic value.
  if (empty($entity->type) || $entity->type != 'resource') {
    return FALSE;
  }
  $wrappers = crl_resource_get_wrappers($entity);
  $wrappers_to_check = array_merge(array($wrappers['r_entity_wrapper']), $wrappers['a_entity_wrappers']);
  foreach ($wrappers_to_check as $wrapper) {
    $alert = isset($wrapper->field_update_alert) ? $wrapper->field_update_alert->value() : NULL;
    if ((!empty($alert) && $alert > time())) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Properties getter callback: get resource vote average.
 *
 * NOTE: requires extra queries (does not just use loaded entity data). So it's
 * probably not a good idea to fetch this property over and over on one page.
 *
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_vote_average($entity, array $options, $name, $type, $info) {
  // If we are not working with a resoruce (e.g., building a generic node search
  // index), we can just return a NULL value.
  if (empty($entity->type) || $entity->type != 'resource') {
    return;
  }
  $vote_average = 0;
  if (function_exists('fivestar_get_votes')) {
    $vote_tags = array('platform', 'content', 'cost');
    $active_tags = $vote_tally = $vote_average = 0;
    foreach ($vote_tags as $tag) {
      $vote_data = fivestar_get_votes('node', $entity->nid, $tag);
      if (!empty($vote_data['average']['value'])) {
        $active_tags++;
        $vote_tally = $vote_tally + $vote_data['average']['value'];
      }
    }
    if ($active_tags) {
      $vote_average = number_format(($vote_tally / $active_tags) / 20, 1);
    }
  }
  return $vote_average;
}


/**
 * Properties getter callback: calculate nearest expiration date (as a
 * timestamp) across all resource activity.
 *
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_expiration_date($entity, array $options, $name, $type, $info) {
  // If we are not working with a resoruce (e.g., building a generic node search
  // index), we can just return a NULL value.
  if (empty($entity->type) || $entity->type != 'resource') {
    return;
  }
  // Initialize with a very high number in case we want to use this value in
  // a sort (e.g. ensure NULL/empty values are listed last even when no IS NULL)
  // query sorting is available). We use the max workable value for a 32bit int
  // for comaptibility across different storage indixies (e.g. SySQL and Solr).
  $date = 2147483647;
  $expire = crl_resource_get_expiration($entity);
  if ($expire) {
    $date = $expire;
  }
  return $date;
}


/**
 * Properties getter callback: calculate expiration countdown across all
 * activity.
 *
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_expiration_countdown($entity, array $options, $name, $type, $info) {
  // If we are not working with a resoruce (e.g., building a generic node search
  // index), we can just return a NULL value.
  if (empty($entity->type) || $entity->type != 'resource') {
    return;
  }
  // Initialize with a very high number in case we want to use this value in
  // a sort (e.g. ensure NULL/empty values are listed last even when no IS NULL)
  // query sorting is available). We use the max workable value for a 32bit int
  // for comaptibility across different storage indixies (e.g. SySQL and Solr).
  $days_left = 2147483647;
  $expire = crl_resource_get_expiration($entity);
  if ($expire) {
    // Convert expiration timestamp into simple integer countdown value. Note
    // that we round the day-specific expiration value to end END of the day.
    $days_left = floor(($expire + 86400 - time()) / 60 / 60 / 24);
  }
  return $days_left;
}


/**
 * Helper to fetch the next upcoming expiration date, across all activity, for
 * a resource.
 *
 * @param object $entity
 *   The Drupal entity for a resource.
 * @return integer
 *   A timestamp representing the next upcoming expiration data. Note that this
 *   is the raw date as stored on the activity entity and is not yet rounded to
 *   the start or end of the day. Returns int 0 if no expiration is upcoming.
 */
function crl_resource_get_expiration($entity) {
  $expire = 0;
  $wrappers = crl_resource_get_wrappers($entity);
  // Get the most recent expiration.
  foreach ($wrappers['a_entity_wrappers'] as $a_entity_wrapper) {
    // There should be no expiration value unless the 'license available' status
    // is set (regardless of the expiration data values that may be saved).
    $statuses = isset($a_entity_wrapper->field_activity_crl_status) ? $a_entity_wrapper->field_activity_crl_status->value() : array();
    if (in_array('license_available', $statuses)) {
      $expire_date = isset($a_entity_wrapper->field_activity_offer_duration) ? $a_entity_wrapper->field_activity_offer_duration->value() : NULL;
      // An empty end date, or a matching start/end date, means the field does
      // not designate an expiration.
      if (!empty($expire_date['value2']) && $expire_date['value2'] != $expire_date['value']) {
        $expire_this = strtotime($expire_date['value2']);
        // If we have an active expiration see that it is sooner than any others
        // already detected.
        if (!$expire || $expire_this < $expire) {
          $expire = $expire_this;
        }
      }
    }
  }
  return $expire;
}


/**
 * Helper to get wrappers for all entites involved in a resource/activity
 * relationship.
 *
 * This is a quick way to get useful wrappers for all related entities in a
 * quick call. It assumes that most of the actual entites involved are already
 * loaded in the static entity cache.
 *
 * @param object $entity
 *   Either a resource or activity entity (or related entity wrapper).
 * @return array
 *   An associative array containing:
 *   - r_entity_wrapper: The resource entity wrapper.
 *   - a_entity_wrappers: An array of all activity entity wrappers that are
 *     related to the resource.
 */
function crl_resource_get_wrappers($entity) {
  $passed_type = '';
  // Initalize the passed data into a wrapper and detect the type.
  if (get_class($entity) == 'EntityDrupalWrapper') {
    $passed_type = $entity->value()->type;
    $passed_entity_wrapper = $entity;
  }
  elseif (isset($entity->type)) {
    $passed_type = $entity->type;
    $passed_entity_wrapper = entity_metadata_wrapper('node', $entity);
  }
  // If $passed_type is not set correctly it means that something has gone wrong
  // and/or the passed data is not supported.
  if ($passed_type != 'resource' && $passed_type != 'activity') {
    throw new Exception(t('Only entities of type resource or activity can be wrapped. Type @type passed.', array('@type' => $passed_type)));
  }
  $passed_entity_id = $passed_entity_wrapper->getIdentifier();
  // Get our resource wrapper.
  if ($passed_type == 'activity') {
    if (isset($passed_entity_wrapper->field_resource_reference) && $passed_entity_wrapper->field_resource_reference->value()->type == 'resource') {
      $r_entity_wrapper = entity_metadata_wrapper('node', $passed_entity_wrapper->field_resource_reference->value());
    }
    else {
      throw new Exception(t('The passed activity entity does not appear to be associated with a resource.'));
    }
  }
  else {
    $r_entity_wrapper = $passed_entity_wrapper;
  }
  // Get our activity wrappers.
  $a_entities = isset($r_entity_wrapper->crl_resource_backref) ? $r_entity_wrapper->crl_resource_backref->value() : array();
  $a_entity_wrappers = array();
  foreach ($a_entities as $a_entity) {
    if ($a_entity->nid == $passed_entity_id) {
      $a_entity_wrappers[] = $passed_entity_wrapper;
    }
    else {
      $a_entity_wrappers[] = entity_metadata_wrapper('node', $a_entity);
    }
  }
  return array('r_entity_wrapper' => $r_entity_wrapper, 'a_entity_wrappers' => $a_entity_wrappers);
}


/**
 * Properties callback: centrally define the key|value pairs used for all
 * CRL status options that may be associated with a resource.
 *
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_status_calc_property_oplist() {
  return crl_activity_status_property_oplist() + array(
    'crl_review_available' => t('Reviewed by CRL'),
  );
}


/**
 * Helper to centrally define description values for a CRL status.
 */
function crl_resource_status_calc_descriptions() {
  return crl_activity_status_calc_descriptions();
}


/**
 * Implements hook_facetapi_sort_info().
 */
function crl_resource_facetapi_sort_info() {
  $sorts = array();
  $sorts['crl_status_sort'] = array(
    'label' => t('Custom CRL Status Sort'),
    'callback' => 'crl_resource_activity_status_property_sort',
    'description' => t('Custom sort order that only applies to CRL status values.'),
    'weight' => -50,
  );
  return $sorts;
}


/**
 * Facet API sort callback: set actual sort order for CRL status facet.
 *
 * @see crl_resource_facetapi_sort_info().
 */
function crl_resource_activity_status_property_sort(array $a, array $b) {
  // The ordering we want should be taken straight from the hard-coded ordering
  // of the initial CRL status options array.
  $options = crl_resource_status_calc_property_oplist();
  $weights = array();
  $i = 0;
  foreach ($options as $op_key => $op_value) {
    $i++;
    $weights[$op_key] = $i;
  }
  $a_weight = 0;
  if (isset($a['#indexed_value'])) {
    if (!empty($weights[$a['#indexed_value']])) {
      $a_weight = $weights[$a['#indexed_value']];
    }
  }
  $b_weight = 0;
  if (isset($b['#indexed_value'])) {
    if (!empty($weights[$b['#indexed_value']])) {
      $b_weight = $weights[$b['#indexed_value']];
    }
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Add some customizations for the resource node edit form.
 */
function crl_resource_form_resource_node_form_alter(&$form, &$form_state, $form_id) {
  // If we are adding a resource post a popup that reminds editors to create a
  // provider entry first.
  if (drupal_match_path(current_path(), 'node/add/resource') && empty($form_state['values'])) {
    $message = t('REMINDER: Please ensure that the provider for this resource is listed in the provider picklist (the orange box) before entering any data on this form. If it is not yet listed please create a new provider entry in the system before entering any data here.');
    drupal_add_js('jQuery(document).ready(function () { alert("' . $message . '"); });', 'inline');
  }
}


/**
 * Implements hook_block_info().
 */
function crl_resource_block_info() {
  // The resource summary is a block at the top of each resource.
  $blocks['crl_resource_summary'] = array(
    'info' => t('CRL Resource Summary'),
    'cache' => DRUPAL_NO_CACHE,
  );
  // The resource suggest blocks offers a common hook for resource suggestions.
  $blocks['crl_resource_suggest'] = array(
    'info' => t('CRL Resource Suggest'),
    'cache' => DRUPAL_NO_CACHE,
  );
  // The resource suggest blocks offers a common hook for resource suggestions.
  $blocks['crl_resource_suggest_long'] = array(
    'info' => t('CRL Resource Suggest (Long)'),
    'cache' => DRUPAL_NO_CACHE,
  );
  // Also offer a collapsed version of the resource suggestion block.
  $blocks['crl_resource_suggest_collapsed'] = array(
    'info' => t('CRL Resource Suggest (Collapsed)'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function crl_resource_block_view($delta = '') {
  // Lazy-load our block build methods via an object.
  static $blocks;
  if (!is_object($blocks)) {
    $blocks = new CrlResourceBlocks();
  }
  return $blocks->buildBlock($delta);
}


/**
 * Helper to get activity action links based on related resource info.
 *
 * @param object $entity
 *   A resource entity (or related entity wrapper).
 * @return array
 *   An associative array describing the links.
 */
function crl_resource_activity_get_action_links($entity) {
  $links = array();
  $allow_new = FALSE;
  $wrappers = crl_resource_get_wrappers($entity);
  $r_wrapper = $wrappers['r_entity_wrapper'];
  if (!empty($wrappers['a_entity_wrappers'])) {
    // Activity already exists. Grab the first activty entry and its status.
    $a_wrapper = reset($wrappers['a_entity_wrappers']);
    $status = isset($a_wrapper->field_activity_crl_status) ? $a_wrapper->field_activity_crl_status->value() : array();
    $inactive = array_intersect($status, crl_activity_status_inactive()) ? TRUE : FALSE;
    // If the current user has access to edit the most recent activity, we add
    // an edit link.
    if (entity_access('update', 'node', $a_wrapper->value())) {
      $links[] = array(
        'title' => $inactive ? t('Edit Previous Licensing Cycle') : t('Edit Current Licensing Cycle'),
        'href' => 'node/' . $a_wrapper->value()->nid . '/edit',
        'localized_options' => array('query' => array('activity_title' => rawurlencode('CRL Activity: ' . check_plain($r_wrapper->value()->title)))),
      );
    }
    // If the most current activity is inactive we can also add a create link.
    if ($inactive) {
      $allow_new = TRUE;
    }
  }
  // If no activity exists we can add a create link.
  else {
    $allow_new = TRUE;
  }
  // If a create link is allowed, add it if the user has create rights.
  if ($allow_new && entity_access('create', 'node')) {
    $links[] = array(
      'title' => t('+ Create New Licensing Cycle'),
      'href' => 'node/add/activity',
      'localized_options' => array('query' => array('activity_title' => rawurlencode('CRL Activity: ' . check_plain($r_wrapper->value()->title)), 'resource_id' => $r_wrapper->value()->nid)),
    );
  }
  return array_reverse($links);
}


/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Manually adjust some tabs and action links on resources.
 */
function crl_resource_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($router_item['page_callback'] == 'node_page_edit' && !empty($router_item['map'][1]->type) && $router_item['map'][1]->type == 'resource') {
    $resource_entity = $router_item['map'][1];
    // See if we have action links, and if so, add them as tabs.
    $action_links = crl_resource_activity_get_action_links($resource_entity);
    if ($action_links) {
      $data['tabs'][1]['count'] = isset($data['tabs'][1]['count']) ? $data['tabs'][1]['count'] : 0;
      // Add a "default" tab for the regular resource edit page that we are
      // currently on. This is only needed if there are not already any sub-tabs
      // defined.
      if (empty($data['tabs'][1]['output'])) {
        $data['tabs'][1]['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => array(
            'title' => t('Edit Resource'),
            'href' => $router_item['href'],
            'localized_options' => array(),
          ),
        );
        $data['tabs'][1]['count']++;
      }
      // Add each calculated action link as a new tab.
      foreach ($action_links as $link) {
        $data['tabs'][1]['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => $link,
        );
        $data['tabs'][1]['count']++;
      }
    }
  }
}


/**
 * Implements hook_form_resource_suggestion_entityform_edit_form_alter().
 */
function crl_resource_form_resource_suggestion_entityform_edit_form_alter(&$form, &$form_state, $form_id) {
  // If this user has access to the uniqueness widget and this is a new
  // submission we make some alterations to add "related" suggestions.
  if (module_exists('uniqueness') && user_access('use uniqueness widget')
      && !empty($form['#entity']) && !empty($form['#entity']->is_new)) {
    $title_field_info = field_info_instance('entityform', 'field_title_sort', 'resource_suggestion');
    // Disable the formal title storage and add a temporary field to the form
    // that is compatible with uniqueness lookups.
    $form['field_title_sort']['#access'] = $form['field_title_sort']['#required'] = FALSE;
    $form['title'] = array( // 'title' key creates a form id that work with uniqueness JS
      '#type' => 'textfield',
      '#title' => $title_field_info['label'],
      '#required' => TRUE,
      '#maxlength' => 255,
      '#weight' => -10,
    );
    // Set submit handler that will later process the data from the temporary
    // title field into the formal title storage.
    array_unshift($form['actions']['submit']['#submit'], 'crl_resource_resource_suggestion_entityform_submit');
    // Implement the relevant logic from uniqueness_form_alter() in order to
    // make our entity form uniqueness enabled.
    $form['uniqueness']['#attached']['js'] = array(
      drupal_get_path('module', 'uniqueness') . '/uniqueness.js',
      array('data' => array('uniqueness' => _uniqueness_get_js_settings('resource', NULL)), 'type' => 'setting',)
    );
    $count = 0;
    $content = uniqueness_widget_content($count);
    $form['uniqueness'] += array(
      '#type' => 'fieldset',
      '#title' => filter_xss_admin(variable_get('uniqueness_default_title', t('Related content'))),
      '#collapsible' => FALSE,
      '#weight' => -9, // Place underneath title.
      'uniqueness_type' => array(),
    );
    $form['uniqueness']['uniqueness_type'] += array(
      '#type' => 'item',
      '#title' => '',
      '#markup' => $content,
    );
  }
}


/**
 * Submit callback for resource suggestion entity form.
 * 
 * @see crl_resource_form_resource_suggestion_entityform_edit_form_alter()
 */
function crl_resource_resource_suggestion_entityform_submit($form, &$form_state) {
  // Capture the title in the formal title storage for the submission.
  $lang = $form['field_title_sort']['#language'];
  $form_state['values']['field_title_sort'][$lang][0]['value'] = $form_state['values']['title'];
}


/**
 * Implements hook_form_flag_confirm_alter().
 */
function crl_resource_form_flag_confirm_alter(&$form, &$form_state) {
  // Add some conditional states logic to our resource suggestion flagging form.
  if (isset($form['#flag']) && $form['#flag']->name == 'resource_suggestion_process') {
    // State changes for "required" values also require custom validation logic
    // so add custom validate handler.
    $form['#validate'][] = 'crl_resource_form_resource_suggestion_process_validate';
    // Provider field should be visible/required when accepting.
    $form['field_provider']['#states'] = array(
      'visible' => array(
        ':input[name^="field_resource_suggestion_status"]' => array('value' => 'yes'),
      ),
      'required' => array(
        ':input[name^="field_resource_suggestion_status"]' => array('value' => 'yes'),
      ),
    );
    // Notes field should be visible/required when rejecting.
    $form['field_crl_processing_notes']['#states'] = array(
      'visible' => array(
        ':input[name^="field_resource_suggestion_status"]' => array('value' => 'no'),
      ),
      'required' => array(
        ':input[name^="field_resource_suggestion_status"]' => array('value' => 'no'),
      ),
    );
  }
}


/**
 * Validation callback for resource suggestion flagging form.
 * 
 * Implementes custom validation rules that are driven by conditional show/hide
 * logic in the form itself.
 * 
 * @see crl_resource_form_flag_confirm_alter()
 */
function crl_resource_form_resource_suggestion_process_validate($form, &$form_state) {
  $action = $form_state['values']['field_resource_suggestion_status'][$form['field_resource_suggestion_status']['#language']][0];
  $provider = $form_state['values']['field_provider'][$form['field_provider']['#language']][0];
  $notes = $form_state['values']['field_crl_processing_notes'][$form['field_crl_processing_notes']['#language']][0];
  // When accepting a suggestion the provider field is required.
  if (isset($action['value']) && $action['value'] == 'yes' && empty($provider['target_id'])) {
    form_set_error('field_provider', t('A provider value must be entered when accepting a suggestion.'));
  }
  // When rejecting a suggestion the notes field is required.
  if (isset($action['value']) && $action['value'] == 'no' && empty($notes['value'])) {
    form_set_error('field_crl_processing_notes', t('You must provide a comment if rejecting a suggestion.'));
  }
}