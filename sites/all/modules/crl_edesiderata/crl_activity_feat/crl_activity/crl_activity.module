<?php


// Define the fragment (anchor) for a resoruce activity tab
define('CRL_ACTIVITY_RESOURCE_ACTIVITY_FRAGMENT', 'crl-offers-status');


/**
 * Implements hook_field_extra_fields().
 *
 * Define numerous psuedo fields.
 */
function crl_activity_field_extra_fields() {
  $extra['node']['activity'] = array(
    'display' => array(
      'pseudo_field_activity_group_notice' => array(
        'label' => t('Activity Group Notice Display'),
        'description' => t('A notice message about which group CRL group the activity applies to.'),
        'weight' => 900,
      ),
    ),
  );
  return $extra;
}


/**
 * Implements hook_node_view().
 *
 * Add pseudo fields and other alterations before displaying the node.
 */
function crl_activity_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'activity') {
    // Get info about which extra fields are visible in this view mode.
    $extra_fields_display = field_extra_fields_get_display('node', $node->type, $view_mode);
    // Add pseudo_field_activity_group_notice if it's visible in this mode.
    if (isset($extra_fields_display['pseudo_field_activity_group_notice']['visible']) && $extra_fields_display['pseudo_field_activity_group_notice']['visible']) {
      $entity_wrapper = entity_metadata_wrapper('node', $node);
      $terms = isset($entity_wrapper->field_activity_grouping) ? $entity_wrapper->field_activity_grouping->value() : NULL;
      $groups = array();
      $groups_text = '';
      $i = 0;
      foreach ($terms as $term) {
        $groups[$term->tid] = $term->name;
        $groups_text .= $i ? ', ' . $term->name : $term->name;
        $i++;
      }
      if (!in_array('CRL Members', $groups)) {
        $message = t('The CRL activity posted here is on behalf of <strong>@group</strong> for the benefit of its members only. For inquiries about eligibility for participating in the offer, please contact Judy Alspach at jalspach@crl.edu.', array('@group' => $groups_text));
        $node->content['pseudo_field_activity_group_notice'] = array('#theme' => 'crl_activity_group_notice_field', '#message' => $message);
      }
    }
  }
}


/**
 * Implements hook_node_view_alter().
 *
 * Add custom show/hide display logic on activity nodes. This fires after
 * fieldgroup has done it's initial alterations, so any modifications to those
 * groups can happen here (and not earlier).
 */
function crl_activity_node_view_alter(&$build) {
  if ($build['#bundle'] == 'activity') {
    $entity_wrapper = entity_metadata_wrapper('node', $build['#node']);
    $status_array = isset($entity_wrapper->field_activity_crl_status) ? $entity_wrapper->field_activity_crl_status->value() : array();
    // Alter the offer and trial duration field titles.
    foreach(array('field_activity_offer_duration', 'field_activity_trial_duration') as $field) {
      if (isset($entity_wrapper->{$field}) && isset($build[$field])) {
        // First specify the base label that we'll use for public display. This
        // will typically just show the end date part of the duration.
        $base_label = t('End');
        // Matching value and value2 signifies no end date. In this case
        // the field will only show the start date, so we adjust accordingly.
        if ($entity_wrapper->{$field}->value->value() == $entity_wrapper->{$field}->value2->value()) {
          $base_label = t('Start');
        }
        $build[$field]['#title'] = str_replace(t('Duration'), $base_label, $build[$field]['#title']);
      }
    }
    // Some changes only apply to the embedded view mode (when the node is
    // injected into another page context).
    if ($build['#view_mode'] == 'embedded') {
      // Programmatic field visibility is based on fieldgroups.
      $hide_groups = array();
      if (array_search('license_available', $status_array) === FALSE) {
        $hide_groups[] = 'group_activity_offer';
        $hide_groups[] = 'group_activity_documents';
      }
      if (array_search('trial_access_available', $status_array) === FALSE) {
        $hide_groups[] = 'group_activity_trial';
      }
      // Lookup the children within the fieldgroups to hide, and set the #access
      // flag to FALSE for each respective field. This should ensure the
      // appropriate fields are hidden without needing to change anything
      // structurally.
      foreach ($hide_groups as $group_to_hide) {
        if (!empty($build['#fieldgroups'][$group_to_hide])) {
          foreach ($build['#fieldgroups'][$group_to_hide]->children as $field) {
            $build[$field]['#access'] = FALSE;
          }
        }
      }
      // Also handle the conditional visibility of the "pre-offer notes" which
      // should only appear for certain status values.
      if (isset($build['field_activity_gen_notes']) && !empty($status_array) && !array_intersect($status_array, crl_activity_status_preoffer())) {
        unset($build['field_activity_gen_notes']);
      }
    }
  }
}


/**
 * Implements hook_page_build().
 */
function crl_activity_page_build(&$page) {
  // See if we are about to display an activity page. If so we need to check if
  // it represents an inactive offer and then make some display alterations to
  // ensure users will not mistake the info as current.
  $router = menu_get_item();
  if ($router['path'] == 'node/%') {
    $node = menu_get_object();
    if (isset($node->type) && $node->type == 'activity') {
      $entity_wrapper = entity_metadata_wrapper('node', $node);
      $activity_status = isset($entity_wrapper->field_activity_crl_status) ? $entity_wrapper->field_activity_crl_status->value() : array();
      $resource_node = isset($entity_wrapper->field_resource_reference) ? $entity_wrapper->field_resource_reference->value() : NULL;
      if ($resource_node) {
        $resource_url = entity_uri('node', $resource_node);
        if (array_intersect($activity_status, crl_activity_status_inactive())) {
          drupal_set_title(t('Previous Offer: ') . $resource_node->title);
          drupal_set_message(t('The information shown here is from a previous CRL licensing cycle and may no longer be valid. For the most recent CRL licensing activty and status information please see the !resoruce_link.', array('!resoruce_link' => l(t('resource entry'), $resource_url['path'], array('fragment' => CRL_ACTIVITY_RESOURCE_ACTIVITY_FRAGMENT)))), 'warning', FALSE);
        }
        // If this is not inactive activity then we need to redirect the user
        // to the resource page, as all current activity should be displayed
        // there. This logic assumes that there is always only one active
        // activity record pre resource at any time. If that changes then more
        // conditional controls need to be accounted for here.
        else {
          $resource_url['options']['fragment'] = CRL_ACTIVITY_RESOURCE_ACTIVITY_FRAGMENT;
          drupal_goto($resource_url['path'], $resource_url['options']);
        }
      }
    }
  }
}


/**
 * Implements hook_theme().
 */
function crl_activity_theme() {
  return array(
    // Theme hook for an activity group message field.
    'crl_activity_group_notice_field' => array(
      'variables' => array('message' => '',),
      'path' => drupal_get_path('module', 'crl_activity') . '/themes',
      'file' => 'crl_activity.theme.inc',
    ),
  );
}


/**
 * Implements hook_cron().
 */
function crl_activity_cron() {
  // Do automated status checking for CRL activity entities.
  $sync = new CrlActivityStatusSync();
  $sync->runSync();
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Add some customizations and validation rules for the activity node edit form.
 */
function crl_activity_form_activity_node_form_alter(&$form, &$form_state, $form_id) {
  // When updating an activity entity enforce some custom validation rules on
  // the CRL status settings.
  $form['#validate'][] = 'crl_activity_activity_node_form_validate';

  // Auto-fill some values if they are passed via the URL.
  if (!empty($_GET['resource_id'])) {
    $form['field_resource_reference'][$form['field_resource_reference']['#language']][0]['target_id']['#default_value'] = 'ref(' . $_GET['resource_id'] . ')';
  }
  if (!empty($_GET['activity_title'])) {
    $form['title']['#default_value'] = rawurldecode($_GET['activity_title']);
  }
  // Set the size of grouping element to show all items (in case we are not
  // already using checkboxes for this).
  $grouping_field_element = &$form['field_activity_grouping'][$form['field_activity_grouping']['#language']];
  $grouping_field_element['#size'] = count($grouping_field_element['#options']);
}


/**
 * Implements hook_date_combo_process_alter().
 *
 * Alter the date elements displayed on forms.
 */
function crl_activity_date_combo_process_alter(&$element, $form_state, $context) {
  // For some targeted duration date fields we want to really encounrage editors
  // to use the "end" date. The date module assumes that anytime the start and
  // end date match, it should hide the end date. This makes good sense, but
  // when the field is empty we want to override this behavior so that the end
  // date option is always shown by default.
  if (($element['#field_name'] == 'field_activity_offer_duration' || $element['#field_name'] == 'field_activity_trial_duration' || $element['#field_name'] == 'field_activity_license_duration') &&
      (empty($element['#default_value']['value']) && empty($element['#default_value']['value2']))) {
    $element['show_todate']['#default_value'] = TRUE;
  }
}


/**
 * Validation callback for activity_node_form.
 *
 * @see crl_activity_form_activity_node_form_alter().
 */
function crl_activity_activity_node_form_validate(&$form, &$form_state) {
  $set_status = array();
  // Get the master option labels that we will use in error messages.
  $oplist = crl_activity_status_property_oplist();
  foreach($oplist as $op_key => $op) {
    $oplist['@' . $op_key] = $op;
  }
  $language = $form['language']['#value'];
  if (!empty($form_state['values']['field_activity_crl_status'][$language])) {
    foreach($form_state['values']['field_activity_crl_status'][$language] as $item) {
      if (!empty($item['value'])) {
        $set_status[] = $item['value'];
      }
    }
  }
  // Handle case where an offer is set while another status is set that is
  // mutually exclusive.
  $dissallow_with_offer = array_intersect($set_status, array('crl_desiderata', 'license_under_consideration', 'past_license_offer'));
  if (in_array('license_available', $set_status) && !empty($dissallow_with_offer)) {
    form_set_error('field_activity_crl_status', t('"@license_available" cannot be set while "@crl_desiderata" or "@license_under_consideration" or "@past_license_offer" are also set.', $oplist));
  }
  // Handle case where an offer is inactive while another status is set that is
  // mutually exclusive.
  $dissallow_with_inactive = array_intersect($set_status, array('crl_desiderata', 'license_under_consideration', 'license_available'));
  if (array_intersect($set_status, crl_activity_status_inactive()) && !empty($dissallow_with_inactive)) {
    form_set_error('field_activity_crl_status', t('"@past_license_offer" and "@inactive_declined" cannot be set while "@crl_desiderata" or "@license_under_consideration" or "@license_available" are also set.', $oplist));
  }
  // Handle case where "License renewal available" is set without "License
  // available"
  if (in_array('license_renewal_available', $set_status) && !in_array('license_available', $set_status)) {
    form_set_error('field_activity_crl_status', t('"@license_renewal_available" should only be set if "@license_available" is also set.', $oplist));
  }
  // Handle case where "License under consideration" is set without "Flagged"
  if (in_array('license_under_consideration', $set_status) && !in_array('crl_desiderata', $set_status)) {
    form_set_error('field_activity_crl_status', t('"@license_under_consideration" should only be set if "@crl_desiderata" is also set.', $oplist));
  }
  // Ensure the start and end dates set make sense.
  $to_check = array('license_available' => 'field_activity_offer_duration', 'trial_access_available' => 'field_activity_trial_duration');
  foreach ($to_check as $status => $field) {
    if (in_array($status, $set_status)) {
      // Force dates with no timestamps for even comparisons.
      $today = date('Y-m-d 00:00:00'); // Ensure matching format to value/value2
      $start = $form_state['values'][$field][$language][0]['value'];
      $end = $form_state['values'][$field][$language][0]['value2'];
      if (empty($start) || $start > $today) {
        form_set_error($field, t('"@' . $status . '" cannot be set while the related start date is not set or is in the future.', $oplist));
      }
      if ($start != $end && $end < $today) {
        form_set_error($field, t('"@' . $status . '" cannot be set while the related expiration date is in the past.', $oplist));
      }
    }
  }
}


/**
 * Implements hook_entity_presave().
 *
 * Whenever we save a change to an activity entity, we also want to be sure
 * to mark any related resource entities as "dirty". This ensures that the
 * related resource will be re-indexed with updated CRL status metadata.
 */
function crl_activity_entity_presave($entity, $type) {
  crl_activity_check_set_dirty($entity, $type);
}


/**
 * Implements hook_entity_delete().
 *
 * Whenever we delete an activity entity, we also want to be sure
 * to mark any related resource entities as "dirty". This ensures that the
 * related resource will be re-indexed with updated CRL status metadata.
 */
function crl_activity_entity_delete($entity, $type) {
  crl_activity_check_set_dirty($entity, $type);
}


/**
 * Helper to define the key|value pairs used for CRL status options on activity
 * entities.
 *
 * @return array
 *   An associative array of activity status values.
 */
function crl_activity_status_property_oplist() {
  return array(
    'crl_desiderata' => t('CRL Flagged'),
    'license_under_consideration' => t('Offer Pending'),
    'license_available' => t('Active Offer'),
    'trial_access_available' => t('Trial Access'),
    'license_renewal_available' => t('Renewal Offer'),
    'past_license_offer' => t('Expired Offer'),
    'inactive_declined' => t('Inactive / Declined'),
  );
}

/**
 * Helper to centrally define description values for a CRL status.
 */
function crl_activity_status_calc_descriptions() {
  return array(
    'crl_desiderata' => t('Potential interest to CRL community'),
    'license_under_consideration' => t('Currently a candidate for CRL offer'),
    'license_available' => t('Currently offered for purchase or new subscription'),
    'license_renewal_available' => t('Currently offered for renewal'),
    'trial_access_available' => t('Available for trial'),
    'past_license_offer' => t('Past offers'),
    'inactive_declined' => t('No longer under consideration by CRL'),
    'crl_review_available' => t('Evaluation available by CRL and community'),
  );
}


/**
 * Helper to define which status are considered "inactive".
 *
 * @return array
 *   An indexed list of activity status keys that are considered inactive.
 *
 * @see crl_activity_status_property_oplist().
 */
function crl_activity_status_inactive() {
  return array('past_license_offer', 'inactive_declined');
}


/**
 * Helper to define which status are considered "pre-offer".
 *
 * @return array
 *   An indexed list of activity status keys that are considered pre-offer.
 *
 * @see crl_activity_status_property_oplist().
 */
function crl_activity_status_preoffer() {
  return array('crl_desiderata', 'license_under_consideration', 'inactive_declined');
}


/**
 * Helper function to actually check and mark resource entries as "dirty" when
 * a related activity entry is added/changed/removed.
 *
 * @see: crl_activity_entity_presave().
 * @see: crl_activity_entity_delete().
 */
function crl_activity_check_set_dirty($entity, $type) {
  if ($type == 'node' && isset($entity->type)) {
    $dirty_ids = array();
    if ($entity->type == 'activity') {
      $entity_wrapper = entity_metadata_wrapper('node', $entity);
      $ref = isset($entity_wrapper->field_resource_reference) ? $entity_wrapper->field_resource_reference->value() : NULL;
      if (!empty($ref)) {
        $dirty_ids[] = $ref->nid;
      }
    }
    if (!empty($dirty_ids)) {
      search_api_track_item_change('node', $dirty_ids);
    }
  }
}
