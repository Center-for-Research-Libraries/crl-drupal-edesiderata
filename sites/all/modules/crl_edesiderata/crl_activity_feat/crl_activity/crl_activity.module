<?php


// Define the fragment (anchor) for a resoruce activity tab
define('CRL_ACTIVITY_RESOURCE_ACTIVITY_FRAGMENT', 'node_resource_full_group_crl_details');


/**
 * Implements hook_field_extra_fields().
 * 
 * Define numerous psuedo fields.
 */
function crl_activity_field_extra_fields() {
  $extra['node']['activity'] = array(
    'display' => array(
      'pseudo_field_activity_group_notice' => array(
        'label' => t('Activity Group Notice Display'),
        'description' => t('A notice message about which group CRL group the activity applies to.'),
        'weight' => 900,
      ),
    ),
  );
  return $extra;
}


/**
 * Implements hook_node_view().
 * 
 * Add pseudo fields and other alterations before displaying the node.
 */
function crl_activity_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'activity') {
    // Get info about which extra fields are visible in this view mode.
    $extra_fields_display = field_extra_fields_get_display('node', $node->type, $view_mode);
    // Add pseudo_field_activity_group_notice if it's visible in this mode.
    if (isset($extra_fields_display['pseudo_field_activity_group_notice']['visible']) && $extra_fields_display['pseudo_field_activity_group_notice']['visible']) {
      $entity_wrapper = entity_metadata_wrapper('node', $node);
      $term = isset($entity_wrapper->field_activity_grouping) ? $entity_wrapper->field_activity_grouping->value() : NULL;
      if ($term) {
        // @todo: make some of the strings below configurable and maybe even
        // multilingual friendly.
        if (!empty($term->name) && $term->name != 'CRL Members') {
          $message = t('The CRL activity posted here is on behalf of <strong>@group</strong> for the benefit of its members only. For inquiries about eligibility for participating in the offer, please contact Judy Alspach at jalspach@crl.edu.', array('@group' => $term->name));
          $node->content['pseudo_field_activity_group_notice'] = array('#theme' => 'crl_activity_group_notice_field', '#message' => $message);
        }
      }
    }
    // Alter the offer and trial duration field titles if we don't have an end
    // date (e.g change "Offer Duration" to "Offer Start").
    foreach(array('field_activity_offer_duration', 'field_activity_trial_duration') as $field) {
      if (!empty($node->content[$field])) {
        $items = field_get_items('node', $node, $field);
        // Matching value and value2 signifies no end date.
        if ($items[0]['value'] == $items[0]['value2']) {
          $node->content[$field]['#title'] = str_replace(t('Duration'), t('Start'), $node->content[$field]['#title']);
        }
      }
    }
  }
}


/**
 * Implements hook_theme().
 */
function crl_activity_theme() {
  return array(
    // Theme hook for an activity group message field.
    'crl_activity_group_notice_field' => array(
      'variables' => array('message' => '',),
      'path' => drupal_get_path('module', 'crl_activity') . '/themes',
      'file' => 'crl_activity.theme.inc',
    ),
  );
}


/**
 * Implements hook_cron().
 */
function crl_activity_cron() {
  // Do automated status checking for CRL activity entities.
  $sync = new CrlActivityStatusSync();
  $sync->runSync();
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * 
 * Add some customizations and validation rules for the activity node edit form.
 */
function crl_activity_form_activity_node_form_alter(&$form, &$form_state, $form_id) {
  // When updating an activity entity enforce some custom validation rules on
  // the CRL status settings.
  $form['#validate'][] = 'crl_activity_activity_node_form_validate';
  // Hide the "review available" option as it's purely managed by the system.
  unset($form['field_activity_crl_status'][$form['field_activity_crl_status']['#language']]['#options']['crl_review_available']);
  
  // Auto-fill some values if they are passed via the URL.
  if (!empty($_GET['resource_id'])) {
    $form['field_resource_reference'][$form['field_resource_reference']['#language']][0]['target_id']['#default_value'] = 'ref(' . $_GET['resource_id'] . ')';
  }
  if (!empty($_GET['activity_title'])) {
    $form['title']['#default_value'] = rawurldecode($_GET['activity_title']);
  }
}


/**
 * Implements hook_date_combo_process_alter().
 * 
 * Alter the date elements displayed on forms.
 */
function crl_activity_date_combo_process_alter(&$element, $form_state, $context) {
  // For some targeted duration date fields we want to really encounrage editors
  // to use the "end" date. The date module assumes that anytime the start and
  // end date match, it should hide the end date. This makes good sense, but
  // when the field is empty we want to override this behavior so that the end
  // date option is always shown by default.
  if (($element['#field_name'] == 'field_activity_offer_duration' || $element['#field_name'] == 'field_activity_trial_duration') &&
      (empty($element['#default_value']['value']) && empty($element['#default_value']['value2']))) {
    $element['show_todate']['#default_value'] = TRUE;
  }
}


/**
 * Validation callback for activity_node_form.
 * 
 * @see crl_activity_form_activity_node_form_alter().
 */
function crl_activity_activity_node_form_validate(&$form, &$form_state) {
  $set_status = array();
  // Get the master option labels that we will use in error messages.
  $oplist = array();
  if (function_exists('crl_resource_activity_status_property_oplist')) {
    $oplist = crl_resource_activity_status_property_oplist();
  }
  foreach($oplist as $op_key => $op) {
    $oplist['@' . $op_key] = $op;
  }
  $language = $form['language']['#value'];
  if (!empty($form_state['values']['field_activity_crl_status'][$language])) {
    foreach($form_state['values']['field_activity_crl_status'][$language] as $item) {
      if (!empty($item['value'])) {
        $set_status[] = $item['value'];
      }
    }
  }
  // Handle case where an offer is set while another status is set that is
  // mutually exclusive.
  $dissallow_with_offer = array_intersect($set_status, array('crl_desiderata', 'license_under_consideration', 'past_license_offer'));
  if (in_array('license_available', $set_status) && !empty($dissallow_with_offer)) {
    form_set_error('field_activity_crl_status', t('"@license_available" cannot be set while "@crl_desiderata" or "@license_under_consideration" or "@past_license_offer" are also set.', $oplist));
  }
  // Handle case where an offer is passed-up while another status is set that is
  // mutually exclusive.
  $dissallow_with_passed = array_intersect($set_status, array('crl_desiderata', 'license_under_consideration', 'license_available'));
  if (in_array('inactive_declined', $set_status) && !empty($dissallow_with_passed)) {
    form_set_error('field_activity_crl_status', t('"inactive_declined" cannot be set while "@crl_desiderata" or "@license_under_consideration" or "@license_available" are also set.', $oplist));
  }
  // Handle case where "License renewal available" is set without "License
  // available"
  if (in_array('license_renewal_available', $set_status) && !in_array('license_available', $set_status)) {
    form_set_error('field_activity_crl_status', t('"@license_renewal_available" should only be set if "@license_available" is also set.', $oplist));
  }
  // Handle case where "License under consideration" is set without "Flagged"
  if (in_array('license_under_consideration', $set_status) && !in_array('crl_desiderata', $set_status)) {
    form_set_error('field_activity_crl_status', t('"@license_under_consideration" should only be set if "@crl_desiderata" is also set.', $oplist));
  }
  // Ensure the start and end dates set make sense.
  $to_check = array('license_available' => 'field_activity_offer_duration', 'trial_access_available' => 'field_activity_trial_duration');
  foreach($to_check as $status => $field) {
    if (in_array($status, $set_status)) {
      // Force dates with no timestamps for even comparisons.
      $today = date('Y-m-d 00:00:00'); // Ensure matching format to value/value2
      $start = $form_state['values'][$field][$language][0]['value'];
      $end = $form_state['values'][$field][$language][0]['value2'];
      if (empty($start) || $start > $today) {
        form_set_error($field, t('"@' . $status . '" cannot be set while the related start date is not set or is in the future.', $oplist));
      }
      if ($start != $end && $end < $today) {
        form_set_error($field, t('"@' . $status . '" cannot be set while the related expiration date is in the past.', $oplist));
      }
    }
  }
}


/**
 * Implements hook_node_view_alter().
 * 
 * Add custom show/hide display logic on activity nodes. This fires when a node
 * is built even if its embedded with in another one (or a view).
 */
function crl_activity_node_view_alter(&$build) {
  // Checks for activity nodes.
  if ($build['#bundle'] == 'activity') {
    $entity_wrapper = entity_metadata_wrapper('node', $build['#node']);
    $status_array = isset($entity_wrapper->field_activity_crl_status) ? $entity_wrapper->field_activity_crl_status->value() : array();
    // Our hide logic is based on fieldgroups. This means that any view modes
    // that don't nest the fields we want to hide within a fieldgroup will NOT
    // be altered (the fields may still be shown).
    $hide_groups = array();
    if (array_search('license_available', $status_array) === FALSE) {
      $hide_groups[] = 'group_activity_offer';
    }
    if (array_search('trial_access_available', $status_array) === FALSE) {
      $hide_groups[] = 'group_activity_trial';
    }
    // Lookup the children within the fieldgroups to hide, and set the #access
    // flag to FALSE for each respective field. This should ensure the
    // appropriate fields are hidden without needing to change anything
    // structurally.
    foreach ($hide_groups as $group_to_hide) {
      if (!empty($build['#fieldgroups'][$group_to_hide])) {
        foreach ($build['#fieldgroups'][$group_to_hide]->children as $field) {
          $build[$field]['#access'] = FALSE;
        }
      }
    }
  }
}


/**
 * Implements hook_page_build().
 * 
 * This only fires for the whole page once (unlike hook_node_view_alter() which
 * can fire multiple times per page).
 */
function crl_activity_page_build(&$page) {
  // See if we are about to display an activity page. If so, redirect to the
  // related resource page (we only want to see activity in the context of the
  // resoruce that it's "attached" to).
  $args = arg();
  if (drupal_match_path(current_path(), 'node/*') && is_numeric($args[1]) && !isset($args[2])) {
    $node = node_load($args[1]); // Will be in static cache.
    if (isset($node->type) && $node->type == 'activity' && isset($node->nid) && $node->nid == $args[1]) {
      $entity_wrapper = entity_metadata_wrapper('node', $node);
      $resource_node = isset($entity_wrapper->field_resource_reference) ? $entity_wrapper->field_resource_reference->value() : NULL;
      if (!empty($resource_node)) {
        $url = entity_uri('node', $resource_node);
        if (!empty($url)) {
          $url['options']['fragment'] = CRL_ACTIVITY_RESOURCE_ACTIVITY_FRAGMENT;
          drupal_goto($url['path'], $url['options']);
        }
      }
    }
  }
}


/**
 * Implements hook_entity_presave().
 * 
 * Whenever we save a change to an activity entity, we also want to be sure
 * to mark any related resource entities as "dirty". This ensures that the
 * related resource will be re-indexed with updated CRL status metadata.
 */
function crl_activity_entity_presave($entity, $type) {
  crl_activity_check_set_dirty($entity, $type);
}


/**
 * Implements hook_entity_delete().
 * 
 * Whenever we delete an activity entity, we also want to be sure
 * to mark any related resource entities as "dirty". This ensures that the
 * related resource will be re-indexed with updated CRL status metadata.
 */
function crl_activity_entity_delete($entity, $type) {
  crl_activity_check_set_dirty($entity, $type);
}


/**
 * Helper function to actually check and mark resource entries as "dirty" when
 * a related activity entry is added/changed/removed.
 * 
 * @see: crl_activity_entity_presave().
 * @see: crl_activity_entity_delete().
 */
function crl_activity_check_set_dirty($entity, $type) {
  if ($type == 'node' && isset($entity->type)) {
    $dirty_ids = array();
    if ($entity->type == 'activity') {
      $entity_wrapper = entity_metadata_wrapper('node', $entity);
      $ref = isset($entity_wrapper->field_resource_reference) ? $entity_wrapper->field_resource_reference->value() : NULL;
      if (!empty($ref)) {
        $dirty_ids[] = $ref->nid;
      }
    }
    if (!empty($dirty_ids)) {
      search_api_track_item_change('node', $dirty_ids);
    }
  }
}
