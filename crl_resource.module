<?php


/**
 * Implements hook_field_extra_fields().
 * 
 * Define numerous psuedo fields.
 */
function crl_resource_field_extra_fields() {
  $extra['node']['resource'] = array(
    'display' => array(
      'pseudo_field_resource_status_summary' => array(
        'label' => t('Resource Status Summary Table'),
        'description' => t('A resoruce status summary table.'),
        'weight' => 900,
      ),
      'pseudo_field_resource_all_jisc_details' => array(
        'label' => t('Resource JISC Details'),
        'description' => t('All JISC details fields that should be displayed.'),
        'weight' => 901,
      ),
      'pseudo_field_resource_provider_details' => array(
        'label' => t('Resource Provider Details - Embedded'),
        'description' => t('An "embedded" display of the providers details that are related to the resource'),
        'weight' => 902,
      ),
      'pseudo_field_resource_activity' => array(
        'label' => t('Resource Activity - Embedded'),
        'description' => t('An "embedded" display of the activity details that are related to the resource'),
        'weight' => 903,
      ),
      'pseudo_field_resoruce_coll_content_tax' => array(
        'label' => t('Resource Collection Content Taxonomy'),
        'description' => t('Show (or re-display) collection content taxonomy values.'),
        'weight' => 904,
      ),
      'pseudo_field_resource_source_summary' => array(
        'label' => t('Resource Source Summary'),
        'description' => t('A brief CRL source summary for a resource based on source status.'),
        'weight' => 905,
      ),
      'pseudo_field_resource_table_sources' => array(
        'label' => t('Resource Table Source Legend'),
        'description' => t('A sources legend for resource tablefields.'),
        'weight' => 906,
      ),
      'pseudo_field_resource_review_source' => array(
        'label' => t('Resource Review Source'),
        'description' => t('Source information specific to a CRL review.'),
        'weight' => 907,
      ),
      'pseudo_field_resource_added' => array(
        'label' => t('Resource Added Date'),
        'description' => t('The date the resource was added.'),
        'weight' => 908,
      ),
      'pseudo_field_resource_updated' => array(
        'label' => t('Resource Updated Date'),
        'description' => t('The date the resource was updated.'),
        'weight' => 909,
      ),
      'pseudo_field_resource_alerts' => array(
        'label' => t('Resource Alerts'),
        'description' => t('Show any resource alert details.'),
        'weight' => 910,
      ),
    ),
  );
  return $extra;
}


/**
 * Implements hook_node_view().
 * 
 * Attach custom display elements to a resource node that's about to be
 * rendered (custom pseudo fields, etc.).
 */
function crl_resource_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'resource') {
    require_once dirname(__FILE__) . '/includes/crl_resource_display_elements.class.inc';
    $display_elements = new CrlResourceDisplayElements($node);
    $node->content = array_merge($node->content, get_object_vars($display_elements->build()));
  }
}


/**
 * Implements hook_node_view_alter().
 * 
 * Add custom show/hide display logic on resource nodes. This fires when a node
 * is built even if its embedded with in another one (or a view). This also
 * takes place and the END of the rendering flow so this is our last chance to
 * manipulate things before themeing.
 */
function crl_resource_node_view_alter(&$build) {
  if ($build['#bundle'] == 'resource') {
    if (empty($build['field_resource_all_jisc_details'][0]['#markup'])) {
      unset($build['field_resource_all_jisc_details']);
    }
  }
}


/**
 * Implements hook_theme().
 */
function crl_resource_theme() {
  $hooks = array(
    // Theme hook for a generic pseudo field.
    'crl_resource_pseudo_field' => array(
      'variables' => array('output' => '', 'label' => '', 'inline' => FALSE),
    ),
    // Theme hook to generate a resource status summary field (used at top of
    // the activity tab within a resource).
    'crl_resource_field_status_summary' => array(
      'variables' => array('edit_link' => '', 'status' => array(), 'status_options' => array(), 'status_descriptions' => array()),
    ),
    // Theme hook to generate a publisher legend field.
    'crl_resource_publisher_legend' => array(
      'variables' => array('icon_alt_title' => '', 'icon_text' => ''),
    ),
    // Theme hook to generate a full resource summary block.
    'crl_resource_summary' => array(
      'variables' => array('status' => array(), 'status_options' => array(), 'comment_count' => 0, 'vote_average' => 0, 'interest_count_up' => 0, 'interest_count_down' => 0),
    ),
    // Theme hook to generate a "back to index" link.
    'crl_resource_back_to_index' => array(
      'variables' => array('url' => '', 'back_text' => t('Back to index'), 'browser_back' => FALSE),
    ),
    // Theme hook to generate a resource alert tag.
    'crl_resource_alert_tag' => array(
      'variables' => array('url' => ''),
    ),
    // Theme hook to generate a countdown alert tag.
    'crl_resource_countdown_alert_tag' => array(
      'variables' => array('url' => '', 'days_left' => NULL, 'long' => FALSE),
    ),
    // Theme hook to generate a resource teaser (used in views rows). This will
    // automatically get used by views based on its name and the standard
    // template suggestion rules.
    'views_view_fields__resource_lists' => array(
      'variables' => array(),
      'template' => 'views-view-fields--resource-lists',
    ),
    // Theme hook to generate a resource interest voting widget (used by rate).
    // This will automatically get used by rate based on its name and the
    // standard template suggestion rules.
    'rate_widget__resource_interest' => array(
      'variables' => array(),
      'template' => 'rate-widget--resource-interest',
    ),
  );
  foreach ($hooks as &$hook) {
    // Make sure that our actual theme hooks and/or preprocessor logic is
    // included for each entry.
    $hook['path'] = drupal_get_path('module', 'crl_resource') . '/themes';
    $hook['file'] = 'crl_resource.theme.inc';
  }
  return $hooks;
}


/**
 * Implements hook_views_api().
 */
function crl_resource_views_api() {
  $path = drupal_get_path('module', 'crl_resource');
  return array(
    'api' => 3.0,
    'path' => $path,
    // We could add a template path here to allow views template suggestions to
    // be automatically picked-up from a module subdirectory, but that seems
    // to cause issues with some custom preprocessor hooks that related to these
    // template suggestions (they don't get called). Instead we manually
    // declare all templates, and their paths, in hook_theme().
    // 'template path' => $path . '/themes',
  );
}


/**
 * Implements hook_entity_property_info_alter().
 * 
 * Define some special resource properties (many calculated via backreferences
 * between activity and resource entries). Note that most of these are just
 * meant to be used when displaying a single entity or for use in a Search API
 * index. None of these have a schema so they aren't meant for display with
 * SQL-based views.
 */
function crl_resource_entity_property_info_alter(&$info) {
  $properties = &$info['node']['properties'];
  // Fetch the ids of all entities that point to a resource through a
  // field_resource_reference field.
  $properties['crl_resource_backref'] = array(
    'label' => t("CRL Resource Backreference"),
    'type' => 'list<node>',
    'info' => field_info_field('field_resource_reference'),
    'description' => t("Backward reference to resource via field_resource_reference."),
    'getter callback' => 'crl_resource_get_backref',
  );
  // Define the formal CRL status associated with any given resource based on
  // the aggregated status of any backreferenced activity.
  $properties['crl_resource_status_backref'] = array(
    'label' => t("CRL Resource Status Backreference"),
    'type' => 'list<text>',
    'description' => t("Gets CRL resource status through backreference."),
    'getter callback' => 'crl_resource_get_status_backref',
    'options list' => 'crl_resource_activity_status_property_oplist',
  );
  // See if an alert is active on a resource or any of its backreferenced
  // activity.
  $properties['crl_resource_alert'] = array(
    'label' => t("CRL Resource Alert"),
    'type' => 'boolean',
    'entity views field' => TRUE,
    'description' => t("See if a resource has an alert associated with it (through either the resource itself or backreferenced activity)."),
    'getter callback' => 'crl_resource_get_alert',
  );
  // Get the offer days remaining for a resource that has backreferenced
  // activity with soon-to-be expiration.
  $properties['crl_resource_expiration_countdown'] = array(
    'label' => t("CRL Resource Expiration Countdown"),
    'type' => 'integet',
    'description' => t("Get the offer days remaining for a resource that has backreferenced activity with soon-to-be expiration."),
    'getter callback' => 'crl_resource_get_expiration_countdown',
  );
  // Get the vote average. NOTE: requires extra queries (does not just use
  // loaded entity data).
  $properties['crl_resource_vote_average'] = array(
    'label' => t("CRL Resource Vote Average"),
    'type' => 'decimal',
    'description' => t("Get the average of votes across all fivestar dimentions that apply to resoruces."),
    'getter callback' => 'crl_resource_get_vote_average',
  );
  // Get the interest count (positive). NOTE: requires extra queries (does not
  // just use loaded entity data).
  $properties['crl_resource_interest_count_up'] = array(
    'label' => t("CRL Resource Interest Count"),
    'type' => 'integer',
    'description' => t("Get the aggregate positive interest count for a resoruce."),
    'getter callback' => 'crl_resource_get_interest_count_up',
  );
  // Get the interest count (negative). NOTE: requires extra queries (does not
  // just use loaded entity data).
  $properties['crl_resource_interest_count_down'] = array(
    'label' => t("CRL Resource Interest Count"),
    'type' => 'integer',
    'description' => t("Get the aggregate negative interest count for a resoruce."),
    'getter callback' => 'crl_resource_get_interest_count_down',
  );
  // Captures the glossary value for a resource. This is incldued as a property
  // so that it can be indexed and used as a facet.
  $properties['crl_resource_glossary_value'] = array(
    'label' => t("CRL Resource Glossary Value"),
    'type' => 'text',
    'description' => t("Gets CRL resource glossary value based on the first letter of the sort name."),
    'getter callback' => 'crl_resource_get_glossary_value',
  );
}


/**
 * Properties getter callback: calculate backreferences.
 * 
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_backref($entity, array $options, $name, $type, $info) {
  // The logic below may fail in strange ways if we are not dealing with a node.
  if (empty($entity->nid)) {
    return FALSE;
  }
  // Calculate the backreferences. We store these in a static cache.
  static $backrefs = array();
  if (!isset($backrefs[$entity->nid])) {
    $backrefs[$entity->nid] = array();
    // Get the entities that reference this resource through the
    // field_resource_reference field.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node', '=')
          ->entityCondition('bundle', 'activity')
          ->fieldCondition('field_resource_reference', 'target_id', $entity->nid, '='); 
    // Force query to run without access checks. If we remove the tag below then
    // status values will reflect the current user's access permissions (status
    // values will not appear for activity entries they do not have access to)
    // which could be a very good thing. However, this will cause problems when
    // this code is called though cron when resoruce content is being indexed.
    // This is because cron can only run as one user (anon by default) so the
    // indexed (facet) data can't be user-specific. For now, we just override
    // access control for all cases but may need to think more about how to deal
    // with this.
    $query->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
    $result = $query->execute();
    if (!empty($result['node'])) {
      $backrefs[$entity->nid] = array_keys($result['node']);
    }
  }
  return $backrefs[$entity->nid];
}


/**
 * Properties getter callback: calculate aggregate backreferenced status.
 * 
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_status_backref($entity, array $options, $name, $type, $info) {
  $wrappers = crl_resource_get_wrappers($entity);
  $r_entity_wrapper = $wrappers['r_entity_wrapper'];
  $a_entity_wrappers = $wrappers['a_entity_wrappers'];
  $computed_status = array();
  foreach ($a_entity_wrappers as $a_entity_wrapper) {
    // Get the raw status values set on the activity entity and
    // aggregate them directly into our computed result.
    $statuses = isset($a_entity_wrapper->field_activity_crl_status) ? $a_entity_wrapper->field_activity_crl_status->value() : array();
    if (!empty($statuses)) {
      foreach ($statuses as $status) {
        if (!in_array($status, $computed_status)) {
          $computed_status[] = $status;
        }
      }
    }
  }
  // Also see if this resource has a source status that indicates it's a
  // full CRL review (that status value is always calculated dynamically).
  $source_status = isset($r_entity_wrapper->field_resource_source_status) ? $r_entity_wrapper->field_resource_source_status->value() : NULL;
  if ($source_status == 'crl_review' && !in_array('crl_review_available', $computed_status)) {
    $computed_status[] = 'crl_review_available';
  }
  return $computed_status;
}


/**
 * Properties getter callback: calculate alerts through backreferences.
 * 
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_alert($entity, array $options, $name, $type, $info) {
  $wrappers = crl_resource_get_wrappers($entity);
  $wrappers_to_check = array_merge(array($wrappers['r_entity_wrapper']), $wrappers['a_entity_wrappers']);
  foreach($wrappers_to_check as $wrapper) {
    $alert = isset($wrapper->field_update_alert) ? $wrapper->field_update_alert->value() : NULL;
    if ((!empty($alert) && $alert > time())) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Properties getter callback: calculate expiration countdown through
 * backreferences.
 * 
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_expiration_countdown($entity, array $options, $name, $type, $info) {
  $days_left = NULL;
  $wrappers = crl_resource_get_wrappers($entity);
  // Get the most recent expiration.
  foreach ($wrappers['a_entity_wrappers'] as $a_entity_wrapper) {
    // There should be no coutdown value unless the 'license available' status
    // is set (regardless of the expiration data values that may be saved).
    $statuses = isset($a_entity_wrapper->field_activity_crl_status) ? $a_entity_wrapper->field_activity_crl_status->value() : array();
    if (in_array('license_available', $statuses)) {
      $expire = isset($a_entity_wrapper->field_activity_offer_duration) ? $a_entity_wrapper->field_activity_offer_duration->value() : NULL;
      if (!empty($expire['value2'])) {
        $days_left_this = floor((strtotime($expire['value2']) + 86400 - time()) / 60 / 60 / 24);
        if (is_null($days_left) || $days_left_this < $days_left) {
          $days_left = $days_left_this;
        }
      }
    }
  }
  return $days_left;
}


/**
 * Properties getter callback: get resource vote average.
 * 
 * NOTE: requires extra queries (does not just use loaded entity data). So it's
 * probably not a good idea to fetch this property over and over on one page.
 * 
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_vote_average($entity, array $options, $name, $type, $info) {
  $vote_average = 0;
  if (function_exists('fivestar_get_votes')) {
    $vote_tags = array('platform', 'content', 'cost');
    $active_tags = $vote_tally = $vote_average = 0;
    foreach ($vote_tags as $tag) {
      $vote_data = fivestar_get_votes('node', $entity->nid, $tag);
      if (!empty($vote_data['average']['value'])) {
        $active_tags++;
        $vote_tally = $vote_tally + $vote_data['average']['value'];
      }
    }
    if ($active_tags) {
      $vote_average = number_format(($vote_tally / $active_tags) / 20, 1);
    }
  }
  return $vote_average;
}


/**
 * Properties getter callback: get resource interest count positive.
 * 
 * NOTE: requires extra queries (does not just use loaded entity data). So it's
 * probably not a good idea to fetch this property over and over on one page.
 * 
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_interest_count_up($entity, array $options, $name, $type, $info) {
  return crl_resource_get_interest_count($entity, '1');
}


/**
 * Properties getter callback: get resource interest count negative.
 * 
 * NOTE: requires extra queries (does not just use loaded entity data). So it's
 * probably not a good idea to fetch this property over and over on one page.
 * 
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_interest_count_down($entity, array $options, $name, $type, $info) {
  return crl_resource_get_interest_count($entity, '-1');
}


/**
 * Helper to get a resource interest count based on an option key.
 */
function crl_resource_get_interest_count($entity, $option) {
  // Get the vote data for the interest widget. We use a static cache as this
  // query really only needs to happen once per entity.
  static $results = array();
  if (function_exists('votingapi_select_results') && empty($results[$entity->nid])) {
    $criteria['entity_id'] = $entity->nid;
    $criteria['tag'] = 'resource_interest';
    $criteria['value_type'] = 'option';
    $results[$entity->nid] = votingapi_select_results($criteria);
  }
  foreach ($results[$entity->nid] as $result) {
    if (!empty($result['function']) && $result['function'] == 'option-' . $option && !empty($result['value'])) {
      return (int)$result['value'];
    }
  }
  return 0;
}


/**
 * Properties callback: get glossary value.
 * 
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_get_glossary_value($entity, array $options, $name, $type, $info) {
  $string = '';
  // See if we have a sorting title to work with.
  $entity_wrapper = entity_metadata_wrapper('node', $entity);
  $sort_title = isset($entity_wrapper->field_resource_title_for_sort) ? $entity_wrapper->field_resource_title_for_sort->value() : '';
  if (!empty($sort_title)) {
    $string = $sort_title; 
  }
  elseif (!empty($entity->title)) {
    $string = $entity->title;
  }
  // Get first character in a multibyte-safe way.
  if (!empty($string) && mb_strlen($string)) {
    return strtoupper(mb_substr($string, 0, 1));
  }
  return NULL;
}


/**
 * Helper to get wrappers for all entites involved in a resource/activity
 * relationship.
 * 
 * This is a quick way to get useful wrappers for all related entities in a
 * quick call. It assumes that most of the actual entites involved are already
 * loaded in the static entity cache.
 * 
 * @param object $entity
 *   Either a resource or activity entity (or related entity wrapper).
 * @return array
 *   An associative array containing:
 *   - r_entity_wrapper: The resource entity wrapper.
 *   - a_entity_wrappers: An array of all activity entity wrappers that are
 *     related to the resource.
 */
function crl_resource_get_wrappers($entity) {
  // If we were passed a wrapper, prevent the unneeded re-creation of a new one.
  if (get_class($entity) == 'EntityDrupalWrapper') {
    $passed_entity_wrapper = $entity;
  }
  else {
    $passed_entity_wrapper = entity_metadata_wrapper('node', $entity);
  }
  $passed_entity_id = $passed_entity_wrapper->getIdentifier();
  // Get our resource wrapper.
  if ($passed_entity_wrapper->value()->type == 'activity') {
    $r_entity = isset($passed_entity_wrapper->field_resource_reference) ? $passed_entity_wrapper->field_resource_reference->value() : NULL;
    $r_entity_wrapper = entity_metadata_wrapper('node', $r_entity);
  }
  else {
    $r_entity_wrapper = $passed_entity_wrapper;
  }
  // Get our activity wrappers.
  $a_entities = isset($r_entity_wrapper->crl_resource_backref) ? $r_entity_wrapper->crl_resource_backref->value() : array();
  $a_entity_wrappers = array();
  foreach ($a_entities as $a_entity) {
    if ($a_entity->nid == $passed_entity_id) {
      $a_entity_wrappers[] = $passed_entity_wrapper;
    }
    else {
      $a_entity_wrappers[] = entity_metadata_wrapper('node', $a_entity);
    }
  }
  return array('r_entity_wrapper' => $r_entity_wrapper, 'a_entity_wrappers' => $a_entity_wrappers);
}


/**
 * Properties callback: centrally define the key|value pairs used for the
 * various CRL status options.
 * 
 * @see crl_resource_entity_property_info_alter().
 */
function crl_resource_activity_status_property_oplist() {
  return array(
    'crl_desiderata' => t('CRL Flagged'),
    'license_under_consideration' => t('Offer Pending'),
    'license_available' => t('Active Offer'),
    'trial_access_available' => t('Trial Access'),
    'license_renewal_available' => t('Renewal Offer'),
    'past_license_offer' => t('Expired Offer'),
    'inactive_declined' => t('Inactive / Declined'),
    'crl_review_available' => t('Reviewed by CRL'),
  );
}


/**
 * Implements hook_facetapi_sort_info().
 */
function crl_resource_facetapi_sort_info() {
  $sorts = array();
  $sorts['crl_status_sort'] = array(
    'label' => t('Custom CRL Status Sort'),
    'callback' => 'crl_resource_activity_status_property_sort',
    'description' => t('Custom sort order that only applies to CRL status values.'),
    'weight' => -50,
  );
  return $sorts;
}


/**
 * Facet API sort callback: set actual sort order for CRL status facet.
 * 
 * @see crl_resource_facetapi_sort_info().
 */
function crl_resource_activity_status_property_sort(array $a, array $b) {
  // The ordering we want should be taken straight from the hard-coded ordering
  // of the initial CRL status options array.
  $options = crl_resource_activity_status_property_oplist();
  $weights = array();
  $i = 0;
  foreach ($options as $op_key => $op_value) {
    $i++;
    $weights[$op_key] = $i;
  }
  $a_weight = 0;
  if (isset($a['#indexed_value'])) {
    if (!empty($weights[$a['#indexed_value']])) {
      $a_weight = $weights[$a['#indexed_value']];
    }
  }
  $b_weight = 0;
  if (isset($b['#indexed_value'])) {
    if (!empty($weights[$b['#indexed_value']])) {
      $b_weight = $weights[$b['#indexed_value']];
    }
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * 
 * Add some customizations for the resource node edit form.
 */
function crl_resource_form_resource_node_form_alter(&$form, &$form_state, $form_id) {
  // If we are adding a resource post a popup that reminds editors to create a
  // provider entry first.
  if (drupal_match_path(current_path(), 'node/add/resource') && empty($form_state['values'])) {
    $message = t('REMINDER: Please ensure that the provider for this resource is listed in the provider picklist (the orange box) before entering any data on this form. If it is not yet listed please create a new provider entry in the system before entering any data here.');
    drupal_add_js('jQuery(document).ready(function () { alert("' . $message . '"); });', 'inline');
  }
}


/**
 * Implements hook_block_info().
 */
function crl_resource_block_info() {
  // The resource summary is a block at the top of each resource.
  $blocks['crl_resource_summary'] = array(
    'info' => t('CRL Resource Summary'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  // The "back to index" block shows a caclulated back link for navigation.
  $blocks['crl_resource_back_to_index'] = array(
    'info' => t('CRL Back to Index'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['crl_resource_common_input'] = array(
    'info' => t('CRL Common Resource Vote and Rate Input'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function crl_resource_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    // Build the resoruce summary block.
    case 'crl_resource_summary':
      $nid = arg(1);
      $status = array();
      $status_options = crl_resource_activity_status_property_oplist();
      $comment_count = 0;
      $vote_average = 0;
      $entities = entity_load('node', array($nid));
      if (!empty($entities[$nid])) {
        $entity = $entities[$nid];
        $entity_wrapper = entity_metadata_wrapper('node', $entity);
        $status = isset($entity_wrapper->crl_resource_status_backref) ? $entity_wrapper->crl_resource_status_backref->value() : array();
        $vote_average = isset($entity_wrapper->crl_resource_vote_average) ? $entity_wrapper->crl_resource_vote_average->value() : 0;
        $interest_count_up = isset($entity_wrapper->crl_resource_interest_count_up) ? $entity_wrapper->crl_resource_interest_count_up->value() : 0;
        $interest_count_down = isset($entity_wrapper->crl_resource_interest_count_down) ? $entity_wrapper->crl_resource_interest_count_down->value() : 0;
        if (isset($entity->comment_count)) {
          $comment_count = $entity->comment_count;
        }
      }
      $block['subject'] = '';
      $block['content'] = array(
        'resource_summary' => array(
          '#theme' => 'crl_resource_summary',
          '#status' => $status,
          '#status_options' => $status_options,
          '#comment_count' => $comment_count,
          '#vote_average' => $vote_average,
          '#interest_count_up' => $interest_count_up,
          '#interest_count_down' => $interest_count_down,
        ),
      );
      break;
    // Build the back to index block.
    case 'crl_resource_back_to_index':
      $browser_back = FALSE;
      $url = url('resources/main');
      drupal_add_js(drupal_get_path('module', 'crl_resource') .'/js/crl_resource.js', 'file');
      $block['subject'] = '';
      $block['content'] = array(
        'back_link' => array(
          '#theme' => 'crl_resource_back_to_index',
          '#url' => $url,
          '#back_text' => t('Back to index'),
          '#browser_back' => $browser_back,
        ),
      );
      break;
    // Build the common resource input/interest block
    case 'crl_resource_common_input':
      global $user;
      $nid = arg(1);
      $node = node_load($nid);
      // Make sure block should be visible
      if (isset($node->type) && $node->type == 'resource' && $user->uid) {
        $block['subject'] = t('Interested in this Resource?');
        $block['content'] = array('#markup' => rate_generate_widget(1, 'node', $nid));
      }
      break;
  }
  return $block;
}


/**
 * Helper to an edit link for an activity based on related resource info.
 * 
 * @param object $entity
 *   A resource entity (or related entity wrapper).
 * @return array
 *   An associative array describing the link including:
 *   - path: The path to edit the activity.
 *   - options: A set of link options as used in l().
 */
function crl_resource_activity_edit_link($entity) {
  $edit_link = array();
  $wrappers = crl_resource_get_wrappers($entity);
  $r_wrapper = $wrappers['r_entity_wrapper'];
  if (!empty($wrappers['a_entity_wrappers'])) {
    // Activity already exists. Grab the first activty entry if the current
    // user has edit access to it.
    $a_wrapper = reset($wrappers['a_entity_wrappers']);
    if (entity_access('update', 'node', $a_wrapper->value())) {
      $edit_link = array('path' => 'node/' . $a_wrapper->value()->nid . '/edit', 'options' => array('query' => array('activity_title' => rawurlencode('CRL Activity: ' . check_plain($r_wrapper->value()->title)))));
    }
  }
  elseif (entity_access('create', 'node')) {
    // If no activity data exists, but the user has rights to create some, we
    // build an appropriate add content link.
    $edit_link = array('path' => 'node/add/activity', 'options' => array('query' => array('activity_title' => rawurlencode('CRL Activity: ' . check_plain($r_wrapper->value()->title)), 'resource_id' => $r_wrapper->value()->nid)));
  }
  return $edit_link;
}


/**
 * Implements hook_menu_local_tasks_alter().
 * 
 * Manually adjust some tabs and action links on resources.
 */
function crl_resource_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (!empty($router_item['map'][1]->type) && $router_item['map'][1]->type == 'resource') {
    $resource_entity = $router_item['map'][1];
    $edit_link = crl_resource_activity_edit_link($resource_entity);
    if ($edit_link) {
      // Add an edit action link to jump to edit mode for the related activity.
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => array(
          'title' => t('Edit activity details for this resource'),
          'href' => $edit_link['path'],
          'localized_options' => $edit_link['options'],
        ),
      );
      $data['actions']['count'] = $data['actions']['count'] + 1;
    }
  }
}