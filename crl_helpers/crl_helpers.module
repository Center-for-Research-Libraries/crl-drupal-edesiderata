<?php


/**
 * @file
 * General case-specific customizations for the eDesiderata site.
 */


/**
 * Implements hook_menu().
 */
function crl_helpers_menu() {
  $items['admin/config/crl'] = array(
    'title' => 'CRL Customizations',
    'description' => 'Options for CRL-specific Functionality.',
    'position' => 'right',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}


/**
 * Implements hook_theme().
 *
 * Declare new theme hooks.
 */
function crl_helpers_theme() {
  return array(
    // Theme hook to generate our custom facet breadcrumb.
    'crl_helpers_facet_breadcrumb' => array(
      'variables' => array('breadcrumb' => array(), 'base_path' => '', 'extra' => ''),
      'path' => drupal_get_path('module', 'crl_helpers') . '/themes',
      'file' => 'crl_helpers.theme.inc',
    ),
    // Theme hook to generate editor tools.
    'crl_helpers_editor_tools' => array(
      'variables' => array(),
      'path' => drupal_get_path('module', 'crl_helpers') . '/themes',
      'file' => 'crl_helpers.theme.inc',
    ),
  );
}


/**
 * Implements hook_theme_registry_alter.
 *
 * Override some existing theme hooks via this module directly. Because these
 * hooks are already declared, we use hook_theme_registry_alter().
 */
function crl_helpers_theme_registry_alter(&$theme_registry) {
  $theme_path = drupal_get_path('module', 'crl_helpers') . '/themes';
  // Override the template for a mimemail message.
  if (isset($theme_registry['mimemail_message']) ) {
    // Becuase this is a template, we need to explicitly change the path.
    $theme_registry['mimemail_message']['path'] = $theme_path;
  }
}


/**
 * Implements hook_permission().
 */
function crl_helpers_permission() {
  return array(
    'crl access member features' => array(
      'title' => 'CRL access member features',
      'description' => 'Access member-specific features that are defined in local modules',
    )
  );
}


/**
 * Implements hook_entity_info_alter().
 */
function crl_helpers_entity_info_alter(&$entity_info) {
  // Add an optional "embedded" view mode to some content types.
  $entity_info['node']['view modes']['embedded'] = array(
    'label' => t('Embedded'),
    'custom settings' => TRUE,
  );
}


/**
 * Implements hook_page_build().
 */
function crl_helpers_page_build(&$page) {
  global $user;
  // See if this user passed the IP check when trying to access the registration
  // page.
  if (drupal_match_path(current_path(), 'user/register')) {
    // Disable page cache for this path.
    $GLOBALS['conf']['cache'] = FALSE;
    if (!crl_access_by_ip_is_member()) {
      // If they did not pass the IP check then display a message and redirect
      // to the homepage.
      drupal_set_message(t('New account creation is limited to CRL members who are accessing this site either through an on-campus IP address or Proxy service.'), 'error');
      watchdog('crl user', 'Registration access was denied because the user did not pass the member IP check');
      drupal_goto();
    }
  }
}


/**
 * Implements hook_block_info().
 */
function crl_helpers_block_info() {
  // The facet breadcrumb is a block that can be displayed on the top of a
  // resoruce index.
  $blocks['crl_helpers_facet_breadcrumb'] = array(
    'info' => t('CRL Facet Breadcrumb'),
    'cache' => DRUPAL_NO_CACHE,
  );
  // The editor tools block shows links and info just for editors.
  $blocks['crl_helpers_editor_tools'] = array(
    'info' => t('CRL Editor Tools'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function crl_helpers_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    // Render the facet breadcrumb block.
    case 'crl_helpers_facet_breadcrumb':
      $block['subject'] = '';
      $output = '';
      if (isset($_GET['f']) || !empty($_GET['search_api_views_fulltext'])) {
        // Get the most recent breadcrumb.
        $breadcrumb = drupal_get_breadcrumb();
        // Drop the "home" value for the breadcrumb.
        array_shift($breadcrumb);
        if (!empty($breadcrumb)) {
          $base_path = '/';
          if ($base_url = parse_url($_SERVER['REQUEST_URI'])) {
            $base_path = $base_url['path'];
          }
        }
        $extra = '';
        // Integration with the crl_mydes_feat module to inject a save this
        // search option into the breadcrumb block.
        if (module_exists('crl_mydes_feat')) {
          $extra = crl_mydes_feat_build_saved_search_form();
        }
        $output = array(
          'facet_breadcrumb' => array(
            '#breadcrumb' => $breadcrumb,
            '#base_path' => $base_path,
            '#extra' => $extra,
            '#theme' => 'crl_helpers_facet_breadcrumb',
          ),
        );
      }
      $block['content'] = $output;
      break;
    case 'crl_helpers_editor_tools':
      $block['subject'] = '';
      $output = array(
        'editor_tools' => array(
          '#theme' => 'crl_helpers_editor_tools',
        ),
      );
      $block['content'] = $output;
      break;
  }
  return $block;
}


/**
 * Implements hook_filter_info().
 */
function crl_helpers_filter_info() {
  $filters['crl_content_tokens'] = array(
    'title' => t('CRL content tokens'),
    'description' => t('Replace tokens in content areas with fixed values.'),
    'process callback' => '_crl_helpers_content_tokens',
    'cache' => FALSE,
  );
  return $filters;
}


/**
 * Callback to process the custom "crl content tokens" filter.
 *
 * @see crl_helpers_filter_info().
 */
function _crl_helpers_content_tokens($text, $filter, $format, $langcode, $cache, $cache_id) {
  $text = str_replace('[provider]', '<img class="from-provider-icon" title="Direct from Publisher" src="/' . drupal_get_path('module', 'crl_helpers') . '/images/icon_publisher.png">', $text);
  $text = str_replace('[crl_login_url]', url('user', array('query' => array('destination' => request_path()))), $text);
  $text = str_replace('[crl_signup_url]', url('user/register', array('query' => array('destination' => request_path()))), $text);
  // Also integrate with meDesiderarta features to include a token that adds
  // a video highlight.
  if (module_exists('crl_mydes_feat')) {
    $text = str_replace('[crl_medes_video]', theme('crl_mydes_feat_video_link', array('text' => t('Intro to meDesiderata'))), $text);
  }
  return $text;
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function crl_helpers_form_comment_form_alter(&$form, &$form_state, $form_id) {
  // When previewing a comment Drupal insists on showing the full node (being
  // commented on) below the preview. This seems unecessary, cluttered, and
  // potentially problamatic. Simple remove that part of the form.
  unset($form['comment_output_below']);
  // We want to force all comments to be plain text when an input filter is
  // used. For non-editors plain_text will likely be the default, but for
  // editors the default will likely be something else, like full_html. To keep
  // the comment experience consistent for all users (including editors), and to
  // ensure clean/simple comment formatting, we detect cases where the format
  // may be defaulting to something other than plain_text (editors making a new
  // comment or changing an old comment that had a NULL format value), and
  // default to plain_text. Editors will still have the power to override this
  // manually, we are just changing defaults. Tools like better_formats could
  // help here, but that's overkill since we can do this in just a couple lines.
  if (empty($form['cid']['#value']) || empty($form['comment_body'][$form['comment_body']['#language']][0]['#format']) ) {
    $form['comment_body'][$form['comment_body']['#language']][0]['#format'] = filter_fallback_format();
  }
}


/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function crl_helpers_wysiwyg_editor_settings_alter(&$settings, $context) {
  if ($context['profile']->editor == 'ckeditor') {
    // For some reason some parts of the toolbar do not inherit styles
    // correctly unless the css file def does not have a starting "/". So strip.
    if ($settings['contentsCss']) {
      if (is_array($settings['contentsCss'])) {
        foreach ($settings['contentsCss'] as $key => $def) {
          $settings['contentsCss'][$key] = ltrim($settings['contentsCss'][$key], '/');
        }
      }
      else {
        $settings['contentsCss'] = ltrim($settings['contentsCss']);
      }
    }
  }
}


/**
 * Implements hook_preprocess_delta_blocks_page_title().
 *
 * We display titles with delta blocks, so this provides a way to do some
 * special title alterations at the last min. This is a bit of a hack.
 */
function crl_helpers_preprocess_delta_blocks_page_title(&$vars) {
  $altered = FALSE;
  $altered_text = '';
  $query = drupal_get_query_parameters();
  if (!empty($query['f'][0])) {
    switch ($query['f'][0]) {
      case 'crl_resource_status_backref:crl_review_available':
        $altered = TRUE;
        $altered_text = t('Resources - CRL Reviews');
        break;
      case 'crl_resource_status_backref:license_available':
        $altered = TRUE;
        $altered_text = t('Resources - CRL Offers');
        break;
      case 'crl_resource_status_backref:crl_desiderata':
        $altered = TRUE;
        $altered_text = t('Resources - CRL Pipeline');
        break;
    }
  }
  if (drupal_is_front_page()) {
    $altered = TRUE;
    $altered_text = '';
  }
  if ($altered) {
    $vars['page_title'] = $altered_text;
  }
}


/**
 * Implements hook_preprocess_comment().
 *
 * Alter some comment variables before they are themed. Used primarily to
 * implement some ad hoc "private comments" features.
 */
function crl_helpers_preprocess_comment(&$vars) {
  // Add the inst to the author's name if possible.
  $user_inst = crl_user_get_institution($vars['comment']->uid, NULL);
  if (!empty($user_inst)) {
    $vars['author'] = $vars['author'] . ' (' . $user_inst . ')';
  }
  // Hide the title/subject line.
  $vars['title'] = NULL;
  // See if any "privacy" details are set via a special "comment_privacy" field.
  $wrapper = entity_metadata_wrapper('comment', $vars['comment']);
  $privacy = isset($wrapper->field_comment_privacy) ? $wrapper->field_comment_privacy->value() : NULL;
  // Toggle the removal/addition of text based on any privacy settings and user
  // rights.
  if ($privacy == 'anon') { // Hide submitter name.
    // Don't hide anything from admins, but show a notice.
    if (user_access('administer comments')) {
      $vars['content']['privacy_note'] = array('#markup' => t('<strong>Privacy note:</strong> The submitter has chosen to hide their name from everyone except CRL staff.'));
    }
    else {
      $vars['author'] = t('(name hidden)');
      $vars['submitted'] = t('Submission details hidden');
    }
  }
  elseif ($privacy == 'private') { // Hide entire comment.
    global $user;
    // Remove "reply" option.
    if (isset($vars['content']['links']['comment']['#links']['comment-reply'])) {
      unset($vars['content']['links']['comment']['#links']['comment-reply']);
    }
    // Don't hide anything from admins or author, but show a notice.
    if (user_access('administer comments') || $vars['comment']->uid == $user->uid) {
      $vars['content']['privacy_note'] = array('#markup' => t('<strong>Privacy note:</strong> This comment has been hidden from all users except CRL staff and the original author.'));
    }
    else {
      $vars['author'] = t('(name hidden)');
      $vars['submitted'] = t('Submission details hidden');
      $vars['content']['comment_body'] = array('#markup' => t('Comment hidden - this is a private comment to CRL.'));
    }
  }
}


/**
 * Implements hook_views_data_export_xls_header().
 *
 * Alter some export header structures.
 */
function crl_helpers_preprocess_views_data_export_xls_header(&$variables) {
  $output = '';
  $output .= "<h2>eDesiderata - Informed Investment in Electronic Resources</h2>";
  $output .= "<h3>Center for Research Libraries</h3>";
  $output .= "<p><b>Exported from eDesiderata on " . format_date(time(), 'medium')." </b></p>";
  $output .= "<p>&nbsp;</p>" . $variables['header_row'];
  $variables['header_row'] = $output;
}


/**
 * Implements hook_form_alter().
 *
 * Note that this form_alter will fire last thanks to
 * crl_helpers_module_implements_alter(). This is critical so that we can
 * make alterations AFTER revisioning's alterations.
 *
 * @see crl_helpers_module_implements_alter()
 */
function crl_helpers_form_alter(&$form, $form_state) {
  // For the node edit form we make some adjustments to the "revisioning"
  // elements.
  if (!empty($form['#node_edit_form'])) {
    $node = &$form['#node'];
    if (isset($node->nid)) {
      // If revisioning is installed it will already have altered the form, so
      // we alter it's alterations.
      if (isset($form['revision_information'])) {
        // Rebuild the options shown in a custom order and with custom text.
        // Note that we need to retain the keys and ensure that we don't remove
        // any options.
        $new_ordered_options = array(
          REVISIONING_NEW_REVISION_NO_MODERATION => t('Regular Update'),
          REVISIONING_NO_REVISION => t('Minor update (do NOT notify watchers, alter activity feeds or create a new revision)'),
          REVISIONING_NEW_REVISION_WITH_MODERATION => t('Update with moderation (used rarely)'),
        );
        $top_options = array();
        foreach ($new_ordered_options as $key => $value) {
          if (isset($form['revision_information']['revision_operation']['#options'][$key])) {
            unset($form['revision_information']['revision_operation']['#options'][$key]);
            $top_options[$key] = $value;
          }
        }
        $form['revision_information']['revision_operation']['#options'] = $top_options + $form['revision_information']['revision_operation']['#options'];
        $form['revision_information']['revision_operation']['#title'] = t('Update and revision details');
        // Temporarily hide the moderation option if it's not yet active. Doing
        // this sort-of negates the usefulness of the revisioning module (as it
        // means we can't fork existing entities into moderated states), but
        // until CRL fully embraces moderation workflows this should be hidden
        // to avoid confusion.
        if (isset($form['revision_information']['revision_operation']['#options'][REVISIONING_NEW_REVISION_WITH_MODERATION]) && $form['revision_information']['revision_operation']['#default_value'] != REVISIONING_NEW_REVISION_WITH_MODERATION) {
          unset($form['revision_information']['revision_operation']['#options'][REVISIONING_NEW_REVISION_WITH_MODERATION]);
          $form['revision_information']['revision_operation']['#description'] = '';
        }
        // Highlight the revisioning options for resources and activity types.
        // These warrent special attention because they may trigger messages.
        if ($node->type == 'resource' || $node->type == 'activity') {
          $form['revision_information']['revision_operation']['#prefix'] = '<div class="notice-box extreme">';
          $form['revision_information']['revision_operation']['#suffix'] = '</div>';
        }
      }
      // If revisioning is not installed, just alter the core "revision"
      // checkbox.
      else {
        $form['revision_information']['#collapsed'] = FALSE;
        $form['revision_information']['#weight'] = -3;
        $form['revision_information']['revision']['#weight'] = 10;
        $form['revision_information']['revision']['#prefix'] = '<div class="notice-box">';
        $form['revision_information']['revision']['#suffix'] = '</div>';
        $form['revision_information']['revision']['#title'] = t('Notify watchers, alter activity feeds and create a new revision (uncheck for minor updates)');
      }
    }
  }
}


/**
 * Implements hook_module_implements_alter().
 *
 * Used to force this module's hook_form_alter to fire last.
 *
 * @see crl_helpers_form_alter()
 */
function crl_helpers_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && array_key_exists('crl_helpers', $implementations)) {
    $group = $implementations['crl_helpers'];
    unset($implementations['crl_helpers']);
    $implementations['crl_helpers'] = $group;
  }
}


/**
 * Helper to get a country list in a format friendly for select lists.
 *
 * This is really just a wrapper for country_get_list() that ensures this
 * function is available without enabling special modules.
 */
function crl_helpers_country_list() {
  require_once DRUPAL_ROOT . '/includes/locale.inc';
  return country_get_list();
}
