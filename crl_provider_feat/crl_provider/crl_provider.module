<?php


/**
 * Implements hook_field_extra_fields().
 * 
 * Define numerous psuedo fields.
 */
function crl_provider_field_extra_fields() {
  $extra['node']['provider'] = array(
    'display' => array(
      'pseudo_field_provider_added' => array(
        'label' => t('Provider Added Date'),
        'description' => t('The date the provider was added.'),
        'weight' => 908,
      ),
      'pseudo_field_provider_updated' => array(
        'label' => t('Provider Updated Date'),
        'description' => t('The date the provider was updated.'),
        'weight' => 909,
      ),
      'pseudo_field_provider_resources_view' => array(
        'label' => t('eDesiderata Resources by this Provider'),
        'description' => t('A views-based display of resources associated with a given provider.'),
        'weight' => 910,
      ),
      'pseudo_field_provider_full_link' => array(
        'label' => t('Link to Full Provider Details'),
        'description' => t('A simple link to the full Provider entry (e.g., for embedded display modes).'),
        'weight' => 911,
      ),
    ),
  );
  return $extra;
}


/**
 * Implements hook_node_view().
 * 
 * Attach custom display elements to a resource node that's about to be
 * rendered (custom pseudo fields, etc.).
 */
function crl_provider_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'provider') {
    $display_elements = new CrlProviderDisplayElements($node);
    $extra_fields = crl_provider_field_extra_fields();
    foreach($extra_fields['node']['provider']['display'] as $field_name => $details) {
      $node->content[$field_name] = $display_elements->buildField($field_name);
    }
  }
}

/**
 * Implements hook_theme().
 */
function crl_provider_theme() {
  $hooks = array(
    // Theme hook to generate a resource teaser (used in views rows). This will
    // automatically get used by views based on its name and the standard
    // template suggestion rules. We must formally declare it to ensure our
    // custom preprocess functions get used, etc.
    'views_view_fields__provider_lists' => array(
      'variables' => array(),
      'template' => 'views-view-fields--provider-lists',
    ),
  );
  foreach ($hooks as &$hook) {
    // Make sure that our actual theme hooks and/or preprocessor logic is
    // included for each entry.
    $hook['path'] = drupal_get_path('module', 'crl_provider') . '/themes';
    $hook['file'] = 'crl_provider.theme.inc';
  }
  return $hooks;
}


/**
 * Implements hook_block_info().
 */
function crl_provider_block_info() {
  // The resource summary is a block at the top of each resource.
  $blocks['crl_provider_summary'] = array(
    'info' => t('CRL Provider Summary'), 
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function crl_provider_block_view($delta = '') {
  // Lazy-load our block build methods via an object.
  static $blocks;
  if (!is_object($blocks)) {
    $blocks = new CrlProviderBlocks();
  }
  return $blocks->buildBlock($delta);
}